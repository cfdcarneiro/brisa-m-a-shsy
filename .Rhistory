m1 = rma.mv(yi, vi, random = ~1|rayyan.key/Comparison.ID, mods = m1f, data=dat, method="ML", control = list(maxiter = 3000))
m2 = rma.mv(yi=yi, V=vi, data = dat, method = "REML", random = ~1|rayyan.key/Comparison.ID, control = list(maxiter = 3000))
reduced_model_size = length(all.vars(m1f)) - 1
tibble(reduced = m0s, full = m1s, R2 = ((sum(m2$sigma2)-sum(m1$sigma2))/sum(m2$sigma2)*100)-((sum(m2$sigma2)-sum(m0$sigma2))/sum(m2$sigma2)*100), permutations = factorial(reduced_model_size))
})
}
# Faz todo o processo pra um Ãºnico preditor e resume na mÃ©dia dos R2
get_R2_for_single_predictor_3a = function (todos_preditores, preditor_interesse) {
comparison_list = build_model_combinations(todos_preditores, preditor_interesse)
r = all_model_comparisons_3a(comparison_list)
s = mean(r$R2, na.rm = T)
# Pra essa, o peso Ã© o nÃºmero de permutaÃ§Ãµes do modelo reduzido (se a variÃ¡vel de interesse Ã© 4a, tem 3! maneiras possÃ­veis dela ser a 4a, porque tem 3 variÃ¡veis antes dela pra permutar ... faz sentido?)
ws = weighted.mean(r$R2, r$permutations, na.rm = T)
list(all_predictors = todos_preditores, predictor = preditor_interesse, results = r, mean = s, wmean = ws)
}
# Faz todo o processo em separado pra cada um dos preditores da lista
get_R2_for_all_predictors_3a = function (todos_preditores) {
df = map(todos_preditores, function (preditor_interesse) {
print(paste("Running models for", preditor_interesse))
get_R2_for_single_predictor_3a(todos_preditores, preditor_interesse)
})
s = tibble(mean_R2 = map_dbl(df, "mean"), weighted_mean_R2 = map_dbl(df, "wmean"), predictor = map_chr(df, "predictor"))
list(full_results = df, summary = s)
}
dados_uteis <- dados_meta_smd
dados_uteis <-  dados_uteis[!apply(dados_uteis[,c("Diferentiation_method", "Abeta_aggregation", "Assay", "Diferentiation_duration_days", "Concentration_uM", "Duration_hours", "Cell_density")], 1, anyNA),]
multi_meta_reg <- glmulti(yi ~ Diferentiation_method + Abeta_aggregation + Assay + Diferentiation_duration_days + Concentration_uM + Duration_hours, data = dados_uteis, level=1, fitfunction=rma.mv.glmulti, crit="aicc", confsetsize=(2^7), plotty = F)
multi_meta_reg <- glmulti(yi ~ Diferentiation_method + Abeta_aggregation + Assay + Diferentiation_duration_days + Concentration_uM + Duration_hours + Cell_density, data = dados_uteis, level=1, fitfunction=rma.mv.glmulti, crit="aicc", confsetsize=(2^7), plotty = F)
print(multi_meta_reg)
2^7
nrow(dados_uteis)
dat = dados_uteis
meus_preditores = c("Diferentiation_duration_days", "Duration_hours")
melhor_modelo = get_R2_for_all_predictors_3a(meus_preditores)
melhor_modelo.summary = melhor_modelo$summary
melhor_modelo.summary = melhor_modelo.summary %>% mutate(pvalor=0)
melhor_modelo.summary[1,4] = anova(multi_meta_reg@objects[[1]], btt = 2)$QMp
melhor_modelo.summary[2,4] = anova(multi_meta_reg@objects[[1]], btt = 3)$QMp
meus_preditores = c("Diferentiation_duration_days", "Concentration_uM", "Duration_hours", "Cell_density")
melhor_modelo = get_R2_for_all_predictors_3a(meus_preditores)
melhor_modelo.summary = melhor_modelo$summary
View(melhor_modelo.summary)
anova(multi_meta_reg@objects[[1]], btt = 2)
anova(multi_meta_reg@objects[[1]])
multi_meta_reg@objects[[1]]
dados_completos$Duration_hours = as.numeric(Duration_hours)
dados_completos$Duration_hours = as.numeric(dados_completos$Duration_hours)
multi_meta_reg <- glmulti(yi ~ Diferentiation_method + Abeta_aggregation + Assay + Diferentiation_duration_days + Concentration_uM + Duration_hours + Cell_density, data = dados_uteis, level=1, fitfunction=rma.mv.glmulti, crit="aicc", confsetsize=(2^7), plotty = F)
print(multi_meta_reg)
multi_meta_reg@objects[[1]]
dados_por_artigo = dados_completos %>% distinct(rayyan.key, .keep_all = T)
ggplot(dados_por_artigo, aes(x=year)) +
geom_histogram(binwidth = 1, color="black", fill = "white") +
theme_classic() +
scale_y_continuous(limits = c(0,50), n.breaks = 10)
reversal = dados_por_artigo %>% count(tests_reversal)
ssc = dados_por_artigo %>% count(sample_size_calculation)
conflict = dados_por_artigo %>% count(conflict_interest)
registration = dados_por_artigo %>% count(protocol_registration)
article_level = data.frame(
Feature=c("Studies testing reversal",
"Provides sample size calculation",
"Includes conflict of interest statement",
"Has pre-registered"),
Count = c(as.numeric(reversal[2,2]),
0,
as.numeric(conflict[1,2]+conflict[3,2]),
as.numeric(registration[2,2]+registration[3,2])),
Percent = c(as.numeric(reversal[2,2])*100/nrow(dados_por_artigo),
0*100/nrow(dados_por_artigo),
as.numeric(conflict[1,2]+conflict[3,2])*100/nrow(dados_por_artigo),
as.numeric(registration[2,2]+registration[3,2])*100/nrow(dados_por_artigo))
)
kable(article_level, digits = 1)
assay = dados_completos %>% count(Assay)
csource = dados_completos %>% count(Cell_source)
cbank = dados_completos %>% count(Cell_bank)
cauthent = dados_completos %>% count(Cell_authentication)
cmyco = dados_completos %>% count(Cell_mycoplasma)
control = dados_completos %>% count(Control_description)
a_seq = dados_completos %>% count(Abeta_sequence)
a_orig = dados_completos %>% count(Abeta_origin)
a_spec = dados_completos %>% count(Abeta_species)
a_aggr = dados_completos %>% count(Abeta_aggregation)
a_exp = dados_completos %>% count(Single_exposure)
dados_completos %>% summarise(mean(Duration_hours, na.rm = T))
dados_completos %>% summarise(sd(Duration_hours, na.rm = T))
dados_completos %>% summarise(median(Duration_hours, na.rm = T))
dados_completos %>% summarise(min(Duration_hours, na.rm = T))
dados_completos %>% summarise(max(Duration_hours, na.rm = T))
ggplot(dados_completos, aes(x=Duration_hours)) +
geom_histogram(binwidth = 1, color="black", fill = "white") +
theme_classic() +
scale_y_continuous(n.breaks = 10) +
scale_x_continuous(n.breaks = 10)
dados_completos %>% summarise(mean(Concentration_uM, na.rm = T))
dados_completos %>% summarise(sd(Concentration_uM, na.rm = T))
dados_completos %>% summarise(median(Concentration_uM, na.rm = T))
dados_completos %>% summarise(min(Concentration_uM, na.rm = T))
dados_completos %>% summarise(max(Concentration_uM, na.rm = T))
ggplot(dados_completos, aes(x=Concentration_uM)) +
geom_histogram(binwidth = 1, color="black", fill = "white") +
theme_classic() +
scale_y_continuous(n.breaks = 10) +
scale_x_continuous(n.breaks = 10)
dif = dados_completos %>% count(Diferentiation_method)
experiment_level = data.frame(
Feature=c("Describes cell source",
"Describes cell authentication",
"Describes mycoplasma testing",
"Control group is clear",
"Describes Abeta sequence",
"Describes Abeta origin",
"Describes Abeta species",
"Describes Abeta aggregation",
"Has single exposure",
"Describes duration of Abeta exposure",
"Describes concentration of Abeta"),
Count = c(as.numeric(csource[2,2]+csource[1,2]),
as.numeric(cauthent[2,2]),
as.numeric(cmyco[2,2]),
as.numeric(control[3,2]),
sum(!is.na(dados_completos$Abeta_sequence)),
as.numeric(a_orig[3,2]),
as.numeric(a_spec[3,2]),
as.numeric(a_aggr[4,2]),
as.numeric(a_exp[2,2]),
sum(!is.na(dados_completos$Duration_hours)),
sum(!is.na(dados_completos$Concentration_uM))),
Percent = c(as.numeric(csource[2,2]+csource[1,2])*100/nrow(dados_completos),
as.numeric(cauthent[2,2])*100/nrow(dados_completos),
as.numeric(cmyco[2,2])*100/nrow(dados_completos),
as.numeric(control[3,2])*100/nrow(dados_completos),
sum(!is.na(dados_completos$Abeta_sequence))*100/nrow(dados_completos),
as.numeric(a_orig[3,2])*100/nrow(dados_completos),
as.numeric(a_spec[3,2])*100/nrow(dados_completos),
as.numeric(a_aggr[4,2])*100/nrow(dados_completos),
as.numeric(a_exp[2,2])*100/nrow(dados_completos),
sum(!is.na(dados_completos$Duration_hours))*100/nrow(dados_completos),
sum(!is.na(dados_completos$Concentration_uM))*100/nrow(dados_completos))
)
kable(experiment_level, digits = 1)
assay
kable(assay %>% arrange(n), digits = 1)
kable(assay %>% arrange(-n), digits = 1)
kable(csource %>% arrange(-n), digits = 1)
kable(cbank %>% arrange(-n), digits = 1)
cbank = dados_completos %>% filter(Cell_source=="Cell bank") %>% count(Cell_bank)
kable(cbank %>% arrange(-n), digits = 1)
kable(cauthent %>% arrange(-n), digits = 1)
kable(cmyco %>% arrange(-n), digits = 1)
kable(control %>% arrange(-n), digits = 1)
kable(a_seq %>% arrange(-n), digits = 1)
kable(a_orig %>% arrange(-n), digits = 1)
kable(a_spec %>% arrange(-n), digits = 1)
kable(a_aggr %>% arrange(-n), digits = 1)
a_exp = dados_completos %>% count(Single_exposure)
kable(a_exp %>% arrange(-n), digits = 1)
dados_completos %>% summarise(mean(Duration_hours, na.rm = T))
dados_completos %>% summarise(sd(Duration_hours, na.rm = T))
dados_completos %>% summarise(median(Duration_hours, na.rm = T))
dados_completos %>% summarise(min(Duration_hours, na.rm = T))
dados_completos %>% summarise(max(Duration_hours, na.rm = T))
ggplot(dados_completos, aes(x=Duration_hours)) +
geom_histogram(binwidth = 1, color="black", fill = "white") +
theme_classic() +
scale_y_continuous(n.breaks = 10) +
scale_x_continuous(n.breaks = 10)
dif = dados_completos %>% count(Diferentiation_method)
kable(dif %>% arrange(-n), digits = 1)
csource
View(csource)
csource[2,2]
csource[2,2]
csource[2,2]
csource["Cell bank"],2]
csource[`Cell bank`],2]
csource[`Cell bank`,2]
csource[Donation,2]
csource["Donation",2]
csource[2,"Donation"]
cserum = dados_completos %>% count(Serum_type)
kable(cserum %>% arrange(-n), digits = 1)
cserumconc = ggplot(dados_completos, aes(x=Serum_concentration)) +
geom_histogram(binwidth = 1, color="black", fill = "white") +
theme_classic() +
scale_y_continuous(n.breaks = 10) +
scale_x_continuous(n.breaks = 10)
ggplot(dados_completos, aes(x=Serum_concentration)) +
geom_histogram(binwidth = 1, color="black", fill = "white") +
theme_classic() +
scale_y_continuous(n.breaks = 10) +
scale_x_continuous(n.breaks = 10)
ggplot(dados_completos, aes(x=as.numeric(Serum_concentration))) +
geom_histogram(binwidth = 1, color="black", fill = "white") +
theme_classic() +
scale_y_continuous(n.breaks = 10) +
scale_x_continuous(n.breaks = 10)
summary(dados_completos$Serum_concentration)
summary(as.numeric(dados_completos$Serum_concentration))
kable(cserumconc %>% arrange(-n), digits = 1)
cserumconc = dados_completos %>% count(Serum_concentration)
kable(cserumconc %>% arrange(-n), digits = 1)
knitr::opts_chunk$set(echo = F)
library(readxl)
library(tidyverse)
library(metafor)
library(metaviz)
library(glmulti)
library(knitr)
selected.ES = dados_meta_smd %>% filter(yi <= -50)
View(selected.ES)
knitr::opts_chunk$set(echo = F)
library(readxl)
library(tidyverse)
library(metafor)
library(metaviz)
library(glmulti)
library(knitr)
dados_limpos = read_xlsx("dados_limpos.xlsx")
dados_completos = dados_limpos %>% filter(control_mean!=0&!is.na(control_mean)&treated_mean!=0&!is.na(treated_mean)&control_n!=0&!is.na(control_n)&treated_n!=0&!is.na(treated_n)&treated_variation!=0&!is.na(treated_variation))
dados_completos = dados_completos %>% filter(Abeta_sequence!="Not informed") %>% filter(Abeta_sequence!="not reported") %>% filter(!is.na(Abeta_sequence))
dados_completos[dados_completos=="WST-1"] = "WST"
dados_completos[dados_completos=="WST-8"] = "WST"
dados_completos$Duration_hours = as.numeric(dados_completos$Duration_hours)
dados_completos = dados_completos %>% mutate(control_sd =
if_else(condition = variation=="SD", true = control_variation, false = (control_variation*sqrt(control_n))))
dados_completos = dados_completos %>% mutate(treated_sd =
if_else(condition = variation=="SD", true = treated_variation, false = (treated_variation*sqrt(treated_n))))
dados_two_sample = dados_completos %>% filter(!is.na(control_sd)) %>% filter(control_sd!=0)
dados_one_sample = dados_completos %>% filter(is.na(control_sd)|control_sd==0)
dados_two_sample_smd = escalc(measure = "SMD", m1i = as.numeric(treated_mean), m2i = as.numeric(control_mean), sd1i = as.numeric(treated_sd), sd2i = as.numeric(control_sd), n1i = as.numeric(treated_n), n2i = as.numeric(control_n), data = dados_two_sample)
dados_one_sample_smd = escalc(measure = "SMD", m1i = as.numeric(treated_mean), m2i = as.numeric(control_mean), sd1i = as.numeric(treated_sd), sd2i = as.numeric(treated_sd), n1i = as.numeric(treated_n), n2i = as.numeric(control_n), data = dados_one_sample)
dados_meta_smd = rbind(dados_two_sample_smd, dados_one_sample_smd)
dados_meta_smd = dados_meta_smd %>% mutate(Comparison.ID = 1:nrow(dados_meta_smd))
meta1 = rma(yi=yi, vi=vi, data = dados_meta_smd, measure = "SMD", method = "REML", slab = rayyan.key)
summary(meta1)
#confint(meta1)
summary(dados_meta_smd$control_n)
summary(dados_meta_smd$treated_n)
summary(dados_meta_smd$vi)
top.vi = dados_meta_smd %>% arrange(-vi) %>% select(c("rayyan.key", "yi", "vi")) %>% slice(1:10)
kable(top.vi)
bottom.vi = dados_meta_smd %>% arrange(vi) %>% select(c("rayyan.key", "yi", "vi")) %>% slice(1:10)
kable(bottom.vi)
menor.100 = dados_meta_smd %>% filter(yi <= -100) %>% select(c("rayyan.key", "yi", "vi")) %>% arrange(yi)
kable(menor.100)
menor.50 = dados_meta_smd %>% filter(yi <= -50) %>% filter(yi > -100) %>% select(c("rayyan.key", "yi", "vi")) %>% arrange(yi)
kable(menor.50)
menor.20 = dados_meta_smd %>% filter(yi <= -20) %>% filter(yi > -50) %>% select(c("rayyan.key", "yi", "vi")) %>% arrange(yi)
kable(menor.20)
menor.10 = dados_meta_smd %>% filter(yi <= -10) %>% filter(yi > -20) %>% select(c("rayyan.key", "yi", "vi")) %>% arrange(yi)
kable(menor.10)
ggplot(dados_meta_smd %>% filter(vi<1000), aes(x = vi)) +
geom_histogram(binwidth = 1) +
theme_classic()
maior.1000 = dados_meta_smd %>% filter(vi>=1000)
maior.500 = dados_meta_smd %>% filter(vi>=500) %>% filter(vi<1000)
maior.100 = dados_meta_smd %>% filter(vi>=100) %>% filter(vi<500)
maior.50 = dados_meta_smd %>% filter(vi>=50) %>% filter(vi<100)
maior.10 = dados_meta_smd %>% filter(vi>=10) %>% filter(vi<50)
#first round of double checking
selected.ES = dados_meta_smd %>% filter(yi <= -50) %>% select(c("rayyan.key", "figure", "control_name", "treated_name"))
View(selected.ES)
selected.Var = dados_meta_smd %>% filter(vi>=100) %>% select(c("rayyan.key", "figure", "control_name", "treated_name"))
View(selected.Var)
lista_double_checking = bind_rows(selected.ES, selected.Var, .id = c(yi, vi))
lista_double_checking = bind_rows(selected.ES, selected.Var, .id = c("yi", "vi"))
lista_double_checking = bind_rows(selected.ES, selected.Var, .id = "group")
View(lista_double_checking)
31+17
knitr::opts_chunk$set(echo = F)
library(readxl)
library(tidyverse)
library(metafor)
library(metaviz)
library(glmulti)
library(knitr)
dados_limpos = read_xlsx("dados_limpos.xlsx")
dados_completos = dados_limpos %>% filter(control_mean!=0&!is.na(control_mean)&treated_mean!=0&!is.na(treated_mean)&control_n!=0&!is.na(control_n)&treated_n!=0&!is.na(treated_n)&treated_variation!=0&!is.na(treated_variation))
dados_completos = dados_completos %>% filter(Abeta_sequence!="Not informed") %>% filter(Abeta_sequence!="not reported") %>% filter(!is.na(Abeta_sequence))
dados_completos[dados_completos=="WST-1"] = "WST"
dados_completos[dados_completos=="WST-8"] = "WST"
dados_completos$Duration_hours = as.numeric(dados_completos$Duration_hours)
dados_completos = dados_completos %>% mutate(control_sd =
if_else(condition = variation=="SD", true = control_variation, false = (control_variation*sqrt(control_n))))
dados_completos = dados_completos %>% mutate(treated_sd =
if_else(condition = variation=="SD", true = treated_variation, false = (treated_variation*sqrt(treated_n))))
dados_two_sample = dados_completos %>% filter(!is.na(control_sd)) %>% filter(control_sd!=0)
dados_one_sample = dados_completos %>% filter(is.na(control_sd)|control_sd==0)
dados_two_sample_smd = escalc(measure = "SMD", m1i = as.numeric(treated_mean), m2i = as.numeric(control_mean), sd1i = as.numeric(treated_sd), sd2i = as.numeric(control_sd), n1i = as.numeric(treated_n), n2i = as.numeric(control_n), data = dados_two_sample)
dados_one_sample_smd = escalc(measure = "SMD", m1i = as.numeric(treated_mean), m2i = as.numeric(control_mean), sd1i = as.numeric(treated_sd), sd2i = as.numeric(treated_sd), n1i = as.numeric(treated_n), n2i = as.numeric(control_n), data = dados_one_sample)
dados_meta_smd = rbind(dados_two_sample_smd, dados_one_sample_smd)
dados_meta_smd = dados_meta_smd %>% mutate(Comparison_ID = 1:nrow(dados_meta_smd))
meta1 = rma(yi=yi, vi=vi, data = dados_meta_smd, measure = "SMD", method = "REML", slab = rayyan.key)
summary(meta1)
#confint(meta1)
summary(dados_meta_smd$control_n)
summary(dados_meta_smd$treated_n)
summary(dados_meta_smd$vi)
top.vi = dados_meta_smd %>% arrange(-vi) %>% select(c("rayyan.key", "yi", "vi")) %>% slice(1:10)
kable(top.vi)
bottom.vi = dados_meta_smd %>% arrange(vi) %>% select(c("rayyan.key", "yi", "vi")) %>% slice(1:10)
kable(bottom.vi)
menor.100 = dados_meta_smd %>% filter(yi <= -100) %>% select(c("rayyan.key", "yi", "vi")) %>% arrange(yi)
kable(menor.100)
menor.50 = dados_meta_smd %>% filter(yi <= -50) %>% filter(yi > -100) %>% select(c("rayyan.key", "yi", "vi")) %>% arrange(yi)
kable(menor.50)
menor.20 = dados_meta_smd %>% filter(yi <= -20) %>% filter(yi > -50) %>% select(c("rayyan.key", "yi", "vi")) %>% arrange(yi)
kable(menor.20)
menor.10 = dados_meta_smd %>% filter(yi <= -10) %>% filter(yi > -20) %>% select(c("rayyan.key", "yi", "vi")) %>% arrange(yi)
kable(menor.10)
ggplot(dados_meta_smd %>% filter(vi<1000), aes(x = vi)) +
geom_histogram(binwidth = 1) +
theme_classic()
maior.1000 = dados_meta_smd %>% filter(vi>=1000)
maior.500 = dados_meta_smd %>% filter(vi>=500) %>% filter(vi<1000)
maior.100 = dados_meta_smd %>% filter(vi>=100) %>% filter(vi<500)
maior.50 = dados_meta_smd %>% filter(vi>=50) %>% filter(vi<100)
maior.10 = dados_meta_smd %>% filter(vi>=10) %>% filter(vi<50)
#first round of double checking
selected.ES = dados_meta_smd %>% filter(yi <= -50) %>% select(c("rayyan.key", "Comparison_ID"))
selected.Var = dados_meta_smd %>% filter(vi>=100) %>% select(c("rayyan.key", "Comparison_ID"))
lista_double_checking = bind_rows(selected.ES, selected.Var, .id = "motivo")
writexl::write_xlsx(lista_double_checking, "lista_outliers.xlsx")
selected.concent = dados_meta_smd %>% filter(Concentration_uM >=100) %>% select(c("rayyan.key", "Comparison_ID"))
selected.concent = dados_meta_smd %>% filter(Concentration_uM >100) %>% select(c("rayyan.key", "Comparison_ID"))
selected.duration = dados_meta_smd %>% filter(Duration_hours>72) %>% select(c("rayyan.key", "Comparison_ID"))
selected.concent = dados_meta_smd %>% filter(Concentration_uM >100) %>% select(c("rayyan.key", "Comparison_ID"))
writexl::write_xlsx(selected.concent, "lista_concentracao.xlsx")
selected.duration = dados_meta_smd %>% filter(Duration_hours>72) %>% select(c("rayyan.key", "Comparison_ID"))
writexl::write_xlsx(selected.duration, "lista_duracao.xlsx")
knitr::opts_chunk$set(echo = F)
library(readxl)
library(tidyverse)
library(metafor)
library(metaviz)
library(glmulti)
library(knitr)
dados_limpos = read_xlsx("dados_limpos.xlsx")
dados_completos = dados_limpos %>% filter(control_mean!=0&!is.na(control_mean)&treated_mean!=0&!is.na(treated_mean)&control_n!=0&!is.na(control_n)&treated_n!=0&!is.na(treated_n)&treated_variation!=0&!is.na(treated_variation))
dados_completos = dados_completos %>% filter(Abeta_sequence!="Not informed") %>% filter(Abeta_sequence!="not reported") %>% filter(!is.na(Abeta_sequence))
dados_completos[dados_completos=="WST-1"] = "WST"
dados_completos[dados_completos=="WST-8"] = "WST"
dados_completos$Duration_hours = as.numeric(dados_completos$Duration_hours)
dados_completos = dados_completos %>% mutate(control_sd =
if_else(condition = variation=="SD", true = control_variation, false = (control_variation*sqrt(control_n))))
dados_completos = dados_completos %>% mutate(treated_sd =
if_else(condition = variation=="SD", true = treated_variation, false = (treated_variation*sqrt(treated_n))))
dados_two_sample = dados_completos %>% filter(!is.na(control_sd)) %>% filter(control_sd!=0)
dados_one_sample = dados_completos %>% filter(is.na(control_sd)|control_sd==0)
dados_two_sample_smd = escalc(measure = "SMD", m1i = as.numeric(treated_mean), m2i = as.numeric(control_mean), sd1i = as.numeric(treated_sd), sd2i = as.numeric(control_sd), n1i = as.numeric(treated_n), n2i = as.numeric(control_n), data = dados_two_sample)
dados_one_sample_smd = escalc(measure = "SMD", m1i = as.numeric(treated_mean), m2i = as.numeric(control_mean), sd1i = as.numeric(treated_sd), sd2i = as.numeric(treated_sd), n1i = as.numeric(treated_n), n2i = as.numeric(control_n), data = dados_one_sample)
dados_meta_smd = rbind(dados_two_sample_smd, dados_one_sample_smd)
dados_meta_smd = dados_meta_smd %>% mutate(Comparison_ID = 1:nrow(dados_meta_smd))
meta1 = rma(yi=yi, vi=vi, data = dados_meta_smd, measure = "SMD", method = "REML", slab = rayyan.key)
summary(meta1)
#confint(meta1)
summary(dados_meta_smd$control_n)
summary(dados_meta_smd$treated_n)
summary(dados_meta_smd$vi)
top.vi = dados_meta_smd %>% arrange(-vi) %>% select(c("rayyan.key", "yi", "vi")) %>% slice(1:10)
kable(top.vi)
bottom.vi = dados_meta_smd %>% arrange(vi) %>% select(c("rayyan.key", "yi", "vi")) %>% slice(1:10)
kable(bottom.vi)
menor.100 = dados_meta_smd %>% filter(yi <= -100) %>% select(c("rayyan.key", "yi", "vi")) %>% arrange(yi)
kable(menor.100)
menor.50 = dados_meta_smd %>% filter(yi <= -50) %>% filter(yi > -100) %>% select(c("rayyan.key", "yi", "vi")) %>% arrange(yi)
kable(menor.50)
menor.20 = dados_meta_smd %>% filter(yi <= -20) %>% filter(yi > -50) %>% select(c("rayyan.key", "yi", "vi")) %>% arrange(yi)
kable(menor.20)
menor.10 = dados_meta_smd %>% filter(yi <= -10) %>% filter(yi > -20) %>% select(c("rayyan.key", "yi", "vi")) %>% arrange(yi)
kable(menor.10)
ggplot(dados_meta_smd %>% filter(vi<1000), aes(x = vi)) +
geom_histogram(binwidth = 1) +
theme_classic()
maior.1000 = dados_meta_smd %>% filter(vi>=1000)
maior.500 = dados_meta_smd %>% filter(vi>=500) %>% filter(vi<1000)
maior.100 = dados_meta_smd %>% filter(vi>=100) %>% filter(vi<500)
maior.50 = dados_meta_smd %>% filter(vi>=50) %>% filter(vi<100)
maior.10 = dados_meta_smd %>% filter(vi>=10) %>% filter(vi<50)
#first round of double checking
selected.ES = dados_meta_smd %>% filter(yi <= -50) %>% select(c("rayyan.key", "Comparison_ID"))
selected.Var = dados_meta_smd %>% filter(vi>=100) %>% select(c("rayyan.key", "Comparison_ID"))
lista_double_checking = bind_rows(selected.ES, selected.Var, .id = "motivo")
writexl::write_xlsx(lista_double_checking, "lista_outliers.xlsx")
selected.concent = dados_meta_smd %>% filter(Concentration_uM >100) %>% select(c("rayyan.key", "Comparison_ID"))
writexl::write_xlsx(selected.concent, "lista_concentracao.xlsx")
selected.duration = dados_meta_smd %>% filter(Duration_hours>72) %>% select(c("rayyan.key", "Comparison_ID"))
writexl::write_xlsx(selected.duration, "lista_duracao.xlsx")
#first round of double checking
selected.ES = dados_meta_smd %>% filter(yi <= -50)
selected.Var = dados_meta_smd %>% filter(vi>=100)
lista_double_checking = bind_rows(selected.ES, selected.Var, .id = "motivo")
writexl::write_xlsx(lista_double_checking, "lista_outliers.xlsx")
#first round of double checking
selected.ES = dados_meta_smd %>% filter(yi <= -50)
selected.Var = dados_meta_smd %>% filter(vi>=100)
lista_double_checking = bind_rows(selected.ES, selected.Var, .id = "motivo")
writexl::write_xlsx(lista_double_checking, "lista_outliers.xlsx")
selected.concent = dados_meta_smd %>% filter(Concentration_uM >100) %>% select(c("rayyan.key", "Comparison_ID"))
writexl::write_xlsx(selected.concent, "lista_concentracao.xlsx")
selected.duration = dados_meta_smd %>% filter(Duration_hours>72) %>% select(c("rayyan.key", "Comparison_ID"))
writexl::write_xlsx(selected.duration, "lista_duracao.xlsx")
knitr::opts_chunk$set(echo = F)
library(readxl)
library(tidyverse)
library(metafor)
library(metaviz)
library(glmulti)
library(knitr)
dados_limpos = read_xlsx("dados_limpos.xlsx")
dados_completos = dados_limpos %>% filter(control_mean!=0&!is.na(control_mean)&treated_mean!=0&!is.na(treated_mean)&control_n!=0&!is.na(control_n)&treated_n!=0&!is.na(treated_n)&treated_variation!=0&!is.na(treated_variation))
dados_completos = dados_completos %>% filter(Abeta_sequence!="Not informed") %>% filter(Abeta_sequence!="not reported") %>% filter(!is.na(Abeta_sequence))
dados_completos[dados_completos=="WST-1"] = "WST"
dados_completos[dados_completos=="WST-8"] = "WST"
dados_completos$Duration_hours = as.numeric(dados_completos$Duration_hours)
dados_completos = dados_completos %>% mutate(control_sd =
if_else(condition = variation=="SD", true = control_variation, false = (control_variation*sqrt(control_n))))
dados_completos = dados_completos %>% mutate(treated_sd =
if_else(condition = variation=="SD", true = treated_variation, false = (treated_variation*sqrt(treated_n))))
dados_two_sample = dados_completos %>% filter(!is.na(control_sd)) %>% filter(control_sd!=0)
dados_one_sample = dados_completos %>% filter(is.na(control_sd)|control_sd==0)
dados_two_sample_smd = escalc(measure = "SMD", m1i = as.numeric(treated_mean), m2i = as.numeric(control_mean), sd1i = as.numeric(treated_sd), sd2i = as.numeric(control_sd), n1i = as.numeric(treated_n), n2i = as.numeric(control_n), data = dados_two_sample)
dados_one_sample_smd = escalc(measure = "SMD", m1i = as.numeric(treated_mean), m2i = as.numeric(control_mean), sd1i = as.numeric(treated_sd), sd2i = as.numeric(treated_sd), n1i = as.numeric(treated_n), n2i = as.numeric(control_n), data = dados_one_sample)
dados_meta_smd = rbind(dados_two_sample_smd, dados_one_sample_smd)
dados_meta_smd = dados_meta_smd %>% mutate(Comparison_ID = 1:nrow(dados_meta_smd))
meta1 = rma(yi=yi, vi=vi, data = dados_meta_smd, measure = "SMD", method = "REML", slab = rayyan.key)
summary(meta1)
#confint(meta1)
sem_n = dados_limpos %>% filter(is.na(treated_n)|is.na(control_n))
sem_n = dados_limpos %>% filter(is.na(treated_n)|is.na(control_n))
nrow(sem_n)
sem_n %>% count(rayyan.key)
sem_n %>% summarise(count(rayyan.key))
sem_n_artigos = sem_n %>% count(rayyan.key)
nrow(sem_n_artigos)
sem_n = dados_limpos %>% filter(control_mean!=0&!is.na(control_mean)&treated_mean!=0&!is.na(treated_mean)&treated_variation!=0&!is.na(treated_variation)) %>% filter(is.na(treated_n)|is.na(control_n))
sem_n_artigos = sem_n %>% count(rayyan.key)
nrow(sem_n)
sem_n_artigos = sem_n %>% count(rayyan.key)
nrow(sem_n_artigos)
dados_meta_smd %>% count(n_definition)
knitr::opts_chunk$set(echo = F)
library(readxl)
library(tidyverse)
library(metafor)
library(metaviz)
library(glmulti)
library(knitr)
dados_limpos = read_xlsx("dados_limpos.xlsx")
dados_completos = dados_limpos %>% filter(control_mean!=0&!is.na(control_mean)&treated_mean!=0&!is.na(treated_mean)&control_n!=0&!is.na(control_n)&treated_n!=0&!is.na(treated_n)&treated_variation!=0&!is.na(treated_variation))
dados_completos = dados_completos %>% filter(Abeta_sequence!="Not informed") %>% filter(Abeta_sequence!="not reported") %>% filter(!is.na(Abeta_sequence))
dados_completos[dados_completos=="WST-1"] = "WST"
dados_completos[dados_completos=="WST-8"] = "WST"
dados_completos$Duration_hours = as.numeric(dados_completos$Duration_hours)
dados_completos = dados_completos %>% mutate(control_sd =
if_else(condition = variation=="SD", true = control_variation, false = (control_variation*sqrt(control_n))))
dados_completos = dados_completos %>% mutate(treated_sd =
if_else(condition = variation=="SD", true = treated_variation, false = (treated_variation*sqrt(treated_n))))
dados_two_sample = dados_completos %>% filter(!is.na(control_sd)) %>% filter(control_sd!=0)
dados_one_sample = dados_completos %>% filter(is.na(control_sd)|control_sd==0)
dados_two_sample_smd = escalc(measure = "SMD", m1i = as.numeric(treated_mean), m2i = as.numeric(control_mean), sd1i = as.numeric(treated_sd), sd2i = as.numeric(control_sd), n1i = as.numeric(treated_n), n2i = as.numeric(control_n), data = dados_two_sample)
dados_one_sample_smd = escalc(measure = "SMD", m1i = as.numeric(treated_mean), m2i = as.numeric(control_mean), sd1i = as.numeric(treated_sd), sd2i = as.numeric(treated_sd), n1i = as.numeric(treated_n), n2i = as.numeric(control_n), data = dados_one_sample)
dados_meta_smd = rbind(dados_two_sample_smd, dados_one_sample_smd)
dados_meta_smd = dados_meta_smd %>% mutate(Comparison_ID = 1:nrow(dados_meta_smd))
dados_meta_smd %>% count(n_definition)
dados_meta_smd_sem_replicatas = dados_meta_smd %>% filter(n_definition=="experiments")
dados_meta_smd_sem_replicatas = dados_meta_smd %>% filter(n_definition==starts_with("independent"))
dados_meta_smd %>% count(n_definition)
dados_meta_smd_sem_replicatas = dados_meta_smd %>% filter(n_definition=="independent determinations" &
n_definition=="independent experimental measurements" &
n_definition=="independent experiments" &
n_definition=="independent repetitions" &
n_definition=="independent replicates" &
n_definition=="independent sets of studies")
dados_meta_smd_independent = dados_meta_smd %>% filter(n_definition=="independent determinations" &
n_definition=="independent experimental measurements" &
n_definition=="independent experiments" &
n_definition=="independent repetitions" &
n_definition=="independent replicates" &
n_definition=="independent sets of studies")
meta_3l_independent = rma.mv(yi=yi, V=vi, data = dados_meta_smd_independent, method = "REML", random = ~1|rayyan.key/Comparison_ID)
dados_meta_smd_independent = dados_meta_smd %>% filter(n_definition=="independent determinations" |
n_definition=="independent experimental measurements" |
n_definition=="independent experiments" |
n_definition=="independent repetitions" |
n_definition=="independent replicates" |
n_definition=="independent sets of studies")
meta_3l_independent = rma.mv(yi=yi, V=vi, data = dados_meta_smd_independent, method = "REML", random = ~1|rayyan.key/Comparison_ID)
meta_3l_independent
#confint(meta_3l_independent)
#dados_meta_smd = dados_meta_smd %>% mutate(Comparison_ID = 1:nrow(dados_meta_smd))
meta_3l = rma.mv(yi=yi, V=vi, data = dados_meta_smd, method = "REML", random = ~1|rayyan.key/Comparison_ID)
dados_meta_smd = dados_meta_smd %>% filter(vi<1000)
meta1 = rma(yi=yi, vi=vi, data = dados_meta_smd, measure = "SMD", method = "REML", slab = rayyan.key)
summary(meta1)
confint(meta1)
#dados_meta_smd = dados_meta_smd %>% mutate(Comparison_ID = 1:nrow(dados_meta_smd))
meta_3l = rma.mv(yi=yi, V=vi, data = dados_meta_smd, method = "REML", random = ~1|rayyan.key/Comparison_ID)
meta_3l
#confint(meta_3l)
dados_meta_smd %>% count(n_definition)
dados_meta_smd_independent = dados_meta_smd %>% filter(n_definition=="independent determinations" |
n_definition=="independent experimental measurements" |
n_definition=="independent experiments" |
n_definition=="independent repetitions" |
n_definition=="independent replicates" |
n_definition=="independent sets of studies")
meta_3l_independent = rma.mv(yi=yi, V=vi, data = dados_meta_smd_independent, method = "REML", random = ~1|rayyan.key/Comparison_ID)
meta_3l_independent
#confint(meta_3l_independent)
