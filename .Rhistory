geom_histogram(color="black", fill = "white") +
theme_classic() +
labs(title = "Controles, Excluindo SD < 3% da média")
P = ggplot(dados_meta_smd_3perc, aes(x = treated_coef_var)) +
geom_histogram(color="black", fill = "white") +
theme_classic() +
labs(title = "Tratados, Excluindo SD < 3% da média")
Q = ggplot(dados_meta_smd_4perc, aes(x = control_coef_var)) +
geom_histogram(color="black", fill = "white") +
theme_classic() +
labs(title = "Controles, Excluindo SD < 4% da média")
R = ggplot(dados_meta_smd_4perc, aes(x = treated_coef_var)) +
geom_histogram(color="black", fill = "white") +
theme_classic() +
labs(title = "Tratados, Excluindo SD < 4% da média")
S = ggplot(dados_meta_smd_5perc, aes(x = control_coef_var)) +
geom_histogram(color="black", fill = "white") +
theme_classic() +
labs(title = "Controles, Excluindo SD < 5% da média")
U = ggplot(dados_meta_smd_5perc, aes(x = treated_coef_var)) +
geom_histogram(color="black", fill = "white") +
theme_classic() +
labs(title = "Tratados, Excluindo SD < 5% da média")
cowplot::plot_grid(I, J, K, L, M, N, O, P, Q, R, S, U, ncol = 2)
ggsave("./Figures/histo-coef-var.png", width = 30, height = 60, units = "cm")
knitr::opts_chunk$set(echo = F)
library(readxl)
library(tidyverse)
library(metafor)
library(metaviz)
library(glmulti)
library(knitr)
dados_limpos = read_xlsx("dados_limpos-revisado.xlsx")
dados_completos1 = dados_limpos %>% filter(control_mean!=0&!is.na(control_mean)&treated_mean!=0&!is.na(treated_mean)&treated_variation!=0&!is.na(treated_variation))
dados_completos = dados_completos1 %>% filter(control_n!=0&!is.na(control_n)&treated_n!=0&!is.na(treated_n))
#dados_sem_n = dados_completos1 %>% filter(control_n==0|is.na(control_n)|treated_n==0|is.na(treated_n))
#writexl::write_xlsx(dados_sem_n, "dados_sem_n.xlsx")
dados_completos[dados_completos=="WST-1"] = "WST"
dados_completos[dados_completos=="WST-8"] = "WST"
dados_completos = dados_completos %>% rename(control_mean_original = control_mean) %>%
rename(treated_mean_original = treated_mean) %>%
rename(control_variation_original = control_variation) %>%
rename(treated_variation_original = treated_variation)
dados_completos = dados_completos %>% mutate(control_mean =
if_else(is.na(control_mean_double_check)==T, true = control_mean_original, false = control_mean_double_check))
dados_completos = dados_completos %>% mutate(treated_mean =
if_else(is.na(treated_mean_double_check)==T, true = treated_mean_original, false = treated_mean_double_check))
dados_completos = dados_completos %>% mutate(control_variation =
if_else(is.na(control_variation_double_check)==T, true = control_variation_original, false = control_variation_double_check))
dados_completos = dados_completos %>% mutate(treated_variation =
if_else(is.na(treated_variation_double_check)==T, true = treated_variation_original, false = treated_variation_double_check))
dados_completos = dados_completos %>% mutate(control_sd =
if_else(condition = variation=="SD", true = control_variation, false = (control_variation*sqrt(control_n))))
dados_completos = dados_completos %>% mutate(treated_sd =
if_else(condition = variation=="SD", true = treated_variation, false = (treated_variation*sqrt(treated_n))))
dados_two_sample = dados_completos %>% filter(!is.na(control_sd)) %>% filter(control_sd!=0)
dados_one_sample = dados_completos %>% filter(is.na(control_sd)|control_sd==0)
dados_two_sample_smd = escalc(measure = "SMD", m1i = as.numeric(treated_mean), m2i = as.numeric(control_mean), sd1i = as.numeric(treated_sd), sd2i = as.numeric(control_sd), n1i = as.numeric(treated_n), n2i = as.numeric(control_n), data = dados_two_sample)
dados_one_sample_smd = escalc(measure = "SMD", m1i = as.numeric(treated_mean), m2i = as.numeric(control_mean), sd1i = as.numeric(treated_sd), sd2i = as.numeric(treated_sd), n1i = as.numeric(treated_n), n2i = as.numeric(control_n), data = dados_one_sample)
dados_meta_smd = rbind(dados_two_sample_smd, dados_one_sample_smd)
dados_meta_smd = dados_meta_smd %>% mutate(Comparison_ID = 1:nrow(dados_meta_smd))
dados_meta_smd = dados_meta_smd %>% mutate(mean_n = (treated_n+control_n)/2)
dados_meta_smd = dados_meta_smd %>% mutate(Duration_days = Duration_hours/24)
dados_meta_smd = dados_meta_smd %>% filter(!is.na(Abeta_sequence))
dados_meta_smd_900 = dados_meta_smd %>% filter(yi >-900)
dados_meta_smd_100 = dados_meta_smd %>% filter(yi >-100)
dados_meta_smd_50 = dados_meta_smd %>% filter(yi >-50)
dados_meta_smd_20 = dados_meta_smd %>% filter(yi >-20)
dados_meta_smd_10 = dados_meta_smd %>% filter(yi >-10)
dados_meta_smd_perc = dados_meta_smd %>% mutate(percSD_control = (control_sd*100)/control_mean)
dados_meta_smd_perc = dados_meta_smd_perc %>% mutate(percSD_treated = (treated_sd*100)/treated_mean)
dados_meta_smd_perc = dados_meta_smd_perc %>% mutate(control_coef_var = control_sd/control_mean)
dados_meta_smd_perc = dados_meta_smd_perc %>% mutate(treated_coef_var = treated_sd/treated_mean)
dados_meta_smd_1perc = dados_meta_smd_perc %>% filter(percSD_control > 1 | percSD_control == 0) %>% filter(percSD_treated > 1)
dados_meta_smd_2perc = dados_meta_smd_perc %>% filter(percSD_control > 2 | percSD_control == 0) %>% filter(percSD_treated > 2)
dados_meta_smd_3perc = dados_meta_smd_perc %>% filter(percSD_control > 3 | percSD_control == 0) %>% filter(percSD_treated > 3)
dados_meta_smd_4perc = dados_meta_smd_perc %>% filter(percSD_control > 4 | percSD_control == 0) %>% filter(percSD_treated > 4)
dados_meta_smd_5perc = dados_meta_smd_perc %>% filter(percSD_control > 5 | percSD_control == 0) %>% filter(percSD_treated > 5)
A = ggplot(dados_meta_smd_1perc, aes(x = yi)) +
geom_histogram(binwidth = 1, color="black", fill = "white") +
theme_classic() +
labs(title = paste("Excluindo SD < 1% da média (n total = ", nrow(dados_meta_smd_1perc), ")", sep = ""))
B = ggplot(dados_meta_smd_2perc, aes(x = yi)) +
geom_histogram(binwidth = 1, color="black", fill = "white") +
theme_classic() +
labs(title = paste("Excluindo SD < 2% da média (n total = ", nrow(dados_meta_smd_2perc), ")", sep = ""))
C = ggplot(dados_meta_smd_3perc, aes(x = yi)) +
geom_histogram(binwidth = 1, color="black", fill = "white") +
theme_classic() +
labs(title = paste("Excluindo SD < 3% da média (n total = ", nrow(dados_meta_smd_3perc), ")", sep = ""))
D = ggplot(dados_meta_smd_4perc, aes(x = yi)) +
geom_histogram(binwidth = 1, color="black", fill = "white") +
theme_classic() +
labs(title = paste("Excluindo SD < 4% da média (n total = ", nrow(dados_meta_smd_4perc), ")", sep = ""))
E = ggplot(dados_meta_smd_5perc, aes(x = yi)) +
geom_histogram(binwidth = 1, color="black", fill = "white") +
theme_classic()  +
labs(title = paste("Excluindo SD < 5% da média (n total = ", nrow(dados_meta_smd_5perc), ")", sep = ""))
cowplot::plot_grid(A, B, C, D, E, nrow = 3)
ggsave("./Figures/histo-ES-exclusoes.png", width = 30, units = "cm")
G = ggplot(dados_meta_smd_perc, aes(x = yi)) +
geom_histogram(binwidth = 1, color="black", fill = "white") +
theme_classic()  +
labs(title = paste("Sem exclusoes (n total = ", nrow(dados_meta_smd_perc), ")", sep = ""))
H = ggplot(dados_meta_smd_perc, aes(x = yi)) +
geom_histogram(binwidth = 1, color="black", fill = "white") +
theme_classic()  +
labs(title = paste("Excluindo ES < -100 (n total = ", nrow(dados_meta_smd_perc %>% filter(yi>-100)), ")", sep = "")) +
scale_x_continuous(limits = c(-100, max(dados_meta_smd_perc$yi)))
cowplot::plot_grid(G,H, nrow = 1)
ggsave("./Figures/histo-ES-exclusoes-2.png", width = 30, height = 10, units = "cm")
I = ggplot(dados_meta_smd_perc, aes(x = control_coef_var)) +
geom_histogram(color="black", fill = "white") +
theme_classic()  +
labs(title = "Controles, sem exclusoes")
J = ggplot(dados_meta_smd_perc, aes(x = treated_coef_var)) +
geom_histogram(color="black", fill = "white") +
theme_classic()  +
labs(title = "Tratados, sem exclusoes")
K = ggplot(dados_meta_smd_1perc, aes(x = control_coef_var)) +
geom_histogram(color="black", fill = "white") +
theme_classic() +
labs(title = "Controles, Excluindo SD < 1% da média")
L = ggplot(dados_meta_smd_1perc, aes(x = treated_coef_var)) +
geom_histogram(color="black", fill = "white") +
theme_classic() +
labs(title = "Tratados, Excluindo SD < 1% da média")
M = ggplot(dados_meta_smd_2perc, aes(x = control_coef_var)) +
geom_histogram(color="black", fill = "white") +
theme_classic() +
labs(title = "Controles, Excluindo SD < 2% da média")
N = ggplot(dados_meta_smd_2perc, aes(x = treated_coef_var)) +
geom_histogram(color="black", fill = "white") +
theme_classic() +
labs(title = "Tratados, Excluindo SD < 2% da média")
O = ggplot(dados_meta_smd_3perc, aes(x = control_coef_var)) +
geom_histogram(color="black", fill = "white") +
theme_classic() +
labs(title = "Controles, Excluindo SD < 3% da média")
P = ggplot(dados_meta_smd_3perc, aes(x = treated_coef_var)) +
geom_histogram(color="black", fill = "white") +
theme_classic() +
labs(title = "Tratados, Excluindo SD < 3% da média")
Q = ggplot(dados_meta_smd_4perc, aes(x = control_coef_var)) +
geom_histogram(color="black", fill = "white") +
theme_classic() +
labs(title = "Controles, Excluindo SD < 4% da média")
R = ggplot(dados_meta_smd_4perc, aes(x = treated_coef_var)) +
geom_histogram(color="black", fill = "white") +
theme_classic() +
labs(title = "Tratados, Excluindo SD < 4% da média")
S = ggplot(dados_meta_smd_5perc, aes(x = control_coef_var)) +
geom_histogram(color="black", fill = "white") +
theme_classic() +
labs(title = "Controles, Excluindo SD < 5% da média")
U = ggplot(dados_meta_smd_5perc, aes(x = treated_coef_var)) +
geom_histogram(color="black", fill = "white") +
theme_classic() +
labs(title = "Tratados, Excluindo SD < 5% da média")
cowplot::plot_grid(I, J, K, L, M, N, O, P, Q, R, S, U, ncol = 2)
ggsave("./Figures/histo-coef-var.png", width = 30, height = 60, units = "cm")
dados_por_artigo = dados_completos %>% distinct(rayyan.key, .keep_all = T)
ggplot(dados_por_artigo, aes(x=year)) +
geom_histogram(binwidth = 1, color="black", fill = "white") +
theme_classic() +
scale_y_continuous(n.breaks = 10)
ggsave("./Figures/year-histo.png")
reversal = dados_por_artigo %>% count(tests_reversal)
ssc = dados_por_artigo %>% count(sample_size_calculation)
conflict = dados_por_artigo %>% count(conflict_interest)
registration = dados_por_artigo %>% count(protocol_registration)
article_level = data.frame(
Feature=c("Studies testing reversal",
"Provides sample size calculation",
"Includes conflict of interest statement",
"Has pre-registered"),
Count = c(as.numeric(reversal[2,2]),
0,
as.numeric(conflict[1,2]+conflict[3,2]),
as.numeric(registration[2,2]+registration[3,2])),
Percent = c(as.numeric(reversal[2,2])*100/nrow(dados_por_artigo),
0*100/nrow(dados_por_artigo),
as.numeric(conflict[1,2]+conflict[3,2])*100/nrow(dados_por_artigo),
as.numeric(registration[2,2]+registration[3,2])*100/nrow(dados_por_artigo))
)
kable(article_level, digits = 1)
#min
as.numeric(dados_completos %>% group_by(rayyan.key) %>% summarise(n()) %>% summarise(min(`n()`)))
#max
as.numeric(dados_completos %>% group_by(rayyan.key) %>% summarise(n()) %>% summarise(max(`n()`)))
#median
as.numeric(dados_completos %>% group_by(rayyan.key) %>% summarise(n()) %>% summarise(median(`n()`)))
ggplot((dados_completos %>% group_by(rayyan.key) %>% summarise(n())), aes(x=`n()`)) +
geom_histogram(binwidth = 1, color="black", fill = "white") +
theme_classic() +
scale_y_continuous(limits = c(0,30), n.breaks = 10) +
scale_x_continuous(n.breaks = 10)
ggsave("./Figures/n-comp-histo.png")
assay = dados_completos %>% count(Assay) %>% arrange(-n)
assay = assay %>% mutate(Percent = 100*(assay$n/nrow(dados_completos)))
kable(assay , digits = 1)
assay_a = dados_completos %>% group_by(rayyan.key) %>% count(Assay)
assay_a = assay_a %>% group_by(Assay) %>% summarise(n())%>% arrange(-`n()`) %>% mutate(Percent = 100*(`n()`/nrow(dados_por_artigo)))
kable(assay_a , digits = 1)
csource = dados_completos %>% count(Cell_source)
csource = csource %>% mutate(Percent = 100*(csource$n/nrow(dados_completos)))
kable(csource, digits = 1)
csource_a = dados_completos %>% group_by(rayyan.key) %>% count(Cell_source)
csource_a = csource_a %>% group_by(Cell_source) %>% summarise(n()) %>% mutate(Percent = 100*(`n()`/nrow(dados_por_artigo)))
kable(csource_a, digits = 1)
cbank = dados_completos %>% filter(Cell_source=="Cell bank") %>% count(Cell_bank)
kable(cbank, digits = 1)
cbank_a = dados_completos %>% filter(Cell_source=="Cell bank")  %>% group_by(rayyan.key) %>% count(Cell_bank)
cbank_a = cbank_a %>% group_by(Cell_bank) %>% summarise(n()) %>% mutate(Percent = 100*(`n()`/nrow(dados_por_artigo)))
kable(cbank_a, digits = 1)
cauthent = dados_completos %>% count(Cell_authentication)
cauthent = cauthent
kable(cauthent, digits = 1)
cauthent_a = dados_completos %>% group_by(rayyan.key) %>% count(Cell_authentication)
cauthent_a = cauthent_a %>% group_by(Cell_authentication) %>% summarise(n()) %>% mutate(Percent = 100*(`n()`/nrow(dados_por_artigo)))
kable(cauthent_a, digits = 1)
cmyco = dados_completos %>% count(Cell_mycoplasma)
cmyco = cmyco %>% mutate(Percent = 100*(cmyco$n/nrow(dados_completos)))
kable(cmyco, digits = 1)
cmyco_a = dados_completos %>% group_by(rayyan.key) %>% count(Cell_mycoplasma)
cmyco_a = cmyco_a %>% group_by(Cell_mycoplasma) %>% summarise(n()) %>% mutate(Percent = 100*(`n()`/nrow(dados_por_artigo)))
kable(cmyco_a, digits = 1)
cserum = dados_completos %>% count(Serum_type) %>% arrange(-n)
cserum = cserum %>% mutate(Percent = 100*(cserum$n/nrow(dados_completos)))
kable(cserum, digits = 1)
cserumconc = dados_completos %>% count(Serum_concentration) %>% arrange(-n)
cserumconc = cserumconc %>% mutate(Percent = 100*(cserumconc$n/nrow(dados_completos)))
kable(cserumconc, digits = 1)
cserumandconc = dados_completos %>% group_by(Serum_type) %>% count(Serum_concentration) %>% arrange(-n)
kable(cserumandconc, digits = 1)
cmedium = dados_completos %>% count(Culture_medium_corrected) %>% arrange(-n)
cmedium = cmedium %>% mutate(Percent = 100*(cmedium$n/nrow(dados_completos)))
kable(cmedium, digits = 1)
cantibio = dados_completos %>% count(Antibiotics) %>% arrange(-n)
cantibio = cantibio %>% mutate(Percent = 100*(cantibio$n/nrow(dados_completos)))
kable(cantibio, digits = 1)
cglut = dados_completos %>% count(Glutamine) %>% arrange(-n)
cglut = cglut %>% mutate(Percent = 100*(cglut$n/nrow(dados_completos)))
kable(cglut, digits = 1)
control = dados_completos %>% count(Control_description) %>% arrange(-n)
control = control %>% mutate(Percent = 100*(control$n/nrow(dados_completos)))
kable(control, digits = 1)
a_seq = dados_completos %>% count(Abeta_sequence) %>% arrange(-n)
a_seq = a_seq %>% mutate(Percent = 100*(a_seq$n/nrow(dados_completos)))
kable(a_seq, digits = 1)
a_orig = dados_completos %>% count(Abeta_origin) %>% arrange(-n)
a_orig = a_orig %>% mutate(Percent = 100*(a_orig$n/nrow(dados_completos)))
kable(a_orig, digits = 1)
a_spec = dados_completos %>% count(Abeta_species) %>% arrange(-n)
a_spec = a_spec %>% mutate(Percent = 100*(a_spec$n/nrow(dados_completos)))
kable(a_spec, digits = 1)
a_aggr = dados_completos %>% count(Abeta_aggregation) %>% arrange(-n)
a_aggr = a_aggr %>% mutate(Percent = 100*(a_aggr$n/nrow(dados_completos)))
kable(a_aggr, digits = 1)
a_exp = dados_completos %>% count(Single_exposure) %>% arrange(-n)
a_exp = a_exp %>% mutate(Percent = 100*(a_exp$n/nrow(dados_completos)))
kable(a_exp, digits = 1)
conferir = dados_completos %>% filter(is.na(Abeta_sequence))
writexl::write_xlsx(conferir, "lista_abeta_indefinido.xlsx")
quant_treat = data.frame(
Protocol_variable = c(rep(c("Duration of exposure, in hours"), 6), rep(c("Concentration, in uM"), 6)),
Estimate = c("n", "mean", "sd", "median", "min", "max"),
Data = c(nrow(dados_completos %>% filter(!is.na(Duration_hours))),
as.numeric(dados_completos %>% summarise(mean(Duration_hours, na.rm = T))),
as.numeric(dados_completos %>% summarise(sd(Duration_hours, na.rm = T))),
as.numeric(dados_completos %>% summarise(median(Duration_hours, na.rm = T))),
as.numeric(dados_completos %>% summarise(min(Duration_hours, na.rm = T))),
as.numeric(dados_completos %>% summarise(max(Duration_hours, na.rm = T))),
nrow(dados_completos %>% filter(!is.na(Concentration_uM))),
as.numeric(dados_completos %>% summarise(mean(Concentration_uM, na.rm = T))),
as.numeric(dados_completos %>% summarise(sd(Concentration_uM, na.rm = T))),
as.numeric(dados_completos %>% summarise(median(Concentration_uM, na.rm = T))),
as.numeric(dados_completos %>% summarise(min(Concentration_uM, na.rm = T))),
as.numeric(dados_completos %>% summarise(max(Concentration_uM, na.rm = T)))
)
)
kable(quant_treat)
dif = dados_completos %>% count(Diferentiation_method)
kable(dif %>% arrange(-n), digits = 1)
difserum = dados_completos %>% count(Differentiation_serum_type) %>% arrange(-n)
difserum = difserum %>% mutate(Percent = 100*(difserum$n/nrow(dados_completos)))
kable(difserum, digits = 1)
difserumconc = dados_completos %>% count(Differentiation_serum_concentration) %>% arrange(-n)
difserumconc = difserumconc %>% mutate(Percent = 100*(difserumconc$n/nrow(dados_completos)))
kable(difserumconc, digits = 1)
difserumandconc = dados_completos %>% group_by(Differentiation_serum_type) %>% count(Differentiation_serum_concentration) %>% arrange(-n)
kable(difserumandconc, digits = 1)
difmedium = dados_completos %>% count(Differentiation_medium) %>% arrange(-n)
difmedium = difmedium %>% mutate(Percent = 100*(difmedium$n/nrow(dados_completos)))
kable(difmedium, digits = 1)
difantibio = dados_completos %>% count(Differentiation_antibiotics) %>% arrange(-n)
difantibio = difantibio %>% mutate(Percent = 100*(difantibio$n/nrow(dados_completos)))
kable(difantibio, digits = 1)
difglut = dados_completos %>% count(Differentiation_glutamine) %>% arrange(-n)
difglut = difglut %>% mutate(Percent = 100*(difglut$n/nrow(dados_completos)))
kable(difglut, digits = 1)
quant_treat_dif = data.frame(
Protocol_variable = c(rep(c("Duration of differentiation, in days"), 6), rep(c("Concentration of RA, in uM"), 6)),
Estimate = c("n", "mean", "sd", "median", "min", "max"),
Data = c(nrow(dados_completos %>% filter(!is.na(Diferentiation_duration_days))),
as.numeric(dados_completos %>% summarise(mean(Diferentiation_duration_days, na.rm = T))),
as.numeric(dados_completos %>% summarise(sd(Diferentiation_duration_days, na.rm = T))),
as.numeric(dados_completos %>% summarise(median(Diferentiation_duration_days, na.rm = T))),
as.numeric(dados_completos %>% summarise(min(Diferentiation_duration_days, na.rm = T))),
as.numeric(dados_completos %>% summarise(max(Diferentiation_duration_days, na.rm = T))),
nrow(dados_completos %>% filter(!is.na(Differentiation_RA_concentration_uM))),
as.numeric(dados_completos %>% summarise(mean(Differentiation_RA_concentration_uM, na.rm = T))),
as.numeric(dados_completos %>% summarise(sd(Differentiation_RA_concentration_uM, na.rm = T))),
as.numeric(dados_completos %>% summarise(median(Differentiation_RA_concentration_uM, na.rm = T))),
as.numeric(dados_completos %>% summarise(min(Differentiation_RA_concentration_uM, na.rm = T))),
as.numeric(dados_completos %>% summarise(max(Differentiation_RA_concentration_uM, na.rm = T)))
)
)
kable(quant_treat_dif)
experiment_level = data.frame(
Feature=c("Describes cell source",
"Describes cell authentication",
"Describes mycoplasma testing",
"Control group is clear",
"Describes Abeta sequence",
"Describes Abeta origin",
"Describes Abeta species",
"Describes Abeta aggregation",
"Has single exposure",
"Describes duration of Abeta exposure",
"Describes concentration of Abeta"),
Count = c(as.numeric(csource[2,2]+csource[1,2]),
as.numeric(cauthent[2,2]),
as.numeric(cmyco[2,2]),
as.numeric(control[2,2]+control[3,2]+control[4,2]),
sum(!is.na(dados_completos$Abeta_sequence)),
as.numeric(a_orig[2,2]+a_orig[3,2]),
as.numeric(a_spec[2,2]+a_spec[3,2]),
as.numeric(a_aggr[2,2]+a_aggr[3,2]+a_aggr[4,2]),
as.numeric(a_exp[1,2]),
sum(!is.na(dados_completos$Duration_hours)),
sum(!is.na(dados_completos$Concentration_uM))),
Percent = c(as.numeric(csource[2,2]+csource[1,2])*100/nrow(dados_completos),
as.numeric(cauthent[2,2])*100/nrow(dados_completos),
as.numeric(cmyco[2,2])*100/nrow(dados_completos),
as.numeric(control[2,2]+control[3,2]+control[4,2])*100/nrow(dados_completos),
sum(!is.na(dados_completos$Abeta_sequence))*100/nrow(dados_completos),
as.numeric(a_orig[2,2]+a_orig[3,2])*100/nrow(dados_completos),
as.numeric(a_spec[2,2]+a_spec[3,2])*100/nrow(dados_completos),
as.numeric(a_aggr[2,2]+a_aggr[3,2]+a_aggr[4,2])*100/nrow(dados_completos),
as.numeric(a_exp[1,2])*100/nrow(dados_completos),
sum(!is.na(dados_completos$Duration_hours))*100/nrow(dados_completos),
sum(!is.na(dados_completos$Concentration_uM))*100/nrow(dados_completos))
)
kable(experiment_level, digits = 1)
meta1 = rma(yi=yi, vi=vi, data = dados_meta_smd, measure = "SMD", method = "REML", slab = rayyan.key)
summary(meta1)
confint(meta1)
meta900 = rma(yi=yi, vi=vi, data = dados_meta_smd_900, measure = "SMD", method = "REML", slab = rayyan.key)
summary(meta900)
meta100 = rma(yi=yi, vi=vi, data = dados_meta_smd_100, measure = "SMD", method = "REML", slab = rayyan.key)
summary(meta100)
meta50 = rma(yi=yi, vi=vi, data = dados_meta_smd_50, measure = "SMD", method = "REML", slab = rayyan.key)
summary(meta50)
meta20 = rma(yi=yi, vi=vi, data = dados_meta_smd_20, measure = "SMD", method = "REML", slab = rayyan.key)
summary(meta20)
meta10 = rma(yi=yi, vi=vi, data = dados_meta_smd_10, measure = "SMD", method = "REML", slab = rayyan.key)
summary(meta10)
#forest1 = viz_forest(meta1, study_labels = dados_meta_smd$rayyan.key, col = "black", annotate_CI = TRUE, xlab = "Hedge's g")
#forest1
#ggsave("./Figures/forest.png", width = 10, height = 49, units = "in")
orchaRd::orchard_plot(meta50, group = "Comparison_ID", xlab = "Effect size (Hedge's g)",
transfm = "none") +
scale_color_manual(values = "black") +
scale_fill_manual(values = "grey")
ggsave("./Figures/orchard-maior--50.png", width = 30, height = 20, units = "cm")
orchaRd::orchard_plot(meta1, group = "Comparison_ID", xlab = "Effect size (Hedge's g)",
transfm = "none") +
scale_color_manual(values = "black") +
scale_fill_manual(values = "grey")
ggsave("./Figures/orchard-completo.png", width = 30, height = 20, units = "cm")
knitr::opts_chunk$set(echo = F)
library(readxl)
library(tidyverse)
library(metafor)
library(metaviz)
library(glmulti)
dados_limpos = read_xlsx("dados_limpos-revisado.xlsx")
dados_completos1 = dados_limpos %>% filter(control_mean!=0&!is.na(control_mean)&treated_mean!=0&!is.na(treated_mean)&treated_variation!=0&!is.na(treated_variation))
dados_completos = dados_completos1 %>% filter(control_n!=0&!is.na(control_n)&treated_n!=0&!is.na(treated_n))
#Total number of comparison extracted
nrow(dados_limpos)
#Number of papers for the complete dataset
nrow(dados_limpos %>% count(rayyan.key))
#Number of comparisons excluded for missing means or variation
nrow(dados_limpos)-nrow(dados_completos1)
#Number of comparisons excluded for missing sample sizes
nrow(dados_completos1)-nrow(dados_completos)
print("Total number of comparison extracted")
nrow(dados_limpos)
#Number of papers for the complete dataset
nrow(dados_limpos %>% count(rayyan.key))
#Number of comparisons excluded for missing means or variation
nrow(dados_limpos)-nrow(dados_completos1)
#Number of comparisons excluded for missing sample sizes
nrow(dados_completos1)-nrow(dados_completos)
print("Total number of comparison extracted")
nrow(dados_limpos)
print("Number of papers for the complete dataset")
nrow(dados_limpos %>% count(rayyan.key))
print("Number of comparisons excluded for missing means or variation")
nrow(dados_limpos)-nrow(dados_completos1)
print("Number of comparisons excluded for missing sample sizes")
nrow(dados_completos1)-nrow(dados_completos)
dados_completos[dados_completos=="WST-1"] = "WST"
dados_completos[dados_completos=="WST-8"] = "WST"
dados_completos = dados_completos %>% rename(control_mean_original = control_mean) %>%
rename(treated_mean_original = treated_mean) %>%
rename(control_variation_original = control_variation) %>%
rename(treated_variation_original = treated_variation)
dados_completos = dados_completos %>% mutate(control_mean =
if_else(is.na(control_mean_double_check)==T, true = control_mean_original, false = control_mean_double_check))
dados_completos = dados_completos %>% mutate(treated_mean =
if_else(is.na(treated_mean_double_check)==T, true = treated_mean_original, false = treated_mean_double_check))
dados_completos = dados_completos %>% mutate(control_variation =
if_else(is.na(control_variation_double_check)==T, true = control_variation_original, false = control_variation_double_check))
dados_completos = dados_completos %>% mutate(treated_variation =
if_else(is.na(treated_variation_double_check)==T, true = treated_variation_original, false = treated_variation_double_check))
dados_completos = dados_completos %>% mutate(control_sd =
if_else(condition = variation=="SD", true = control_variation, false = (control_variation*sqrt(control_n))))
dados_completos = dados_completos %>% mutate(treated_sd =
if_else(condition = variation=="SD", true = treated_variation, false = (treated_variation*sqrt(treated_n))))
View(dados_completos)
dados_analise = dados_completos %>% select(-c("doi", "title", "figure", "dep_variable", "control_name", "treated_name", "control_mean_original", "control_mean_double_check", "control_variation_original", "control_variation_double_check", "treated_mean_original", "treated_mean_double_check", "treated_variation_original", "treated_variation_double_check", "OBS_n", "OBS_general", "Passage_number", "N_cells", "N_cells_unit", "N_cells_volume", "Plate_size", "Well_area", "Culture_medium", "Medium_supplements", "Differentiation_supplements", "Differentiation_protocol", "OBS"))
View(dados_analise)
dados_limpos = read_xlsx("dados_limpos-revisado.xlsx")
dados_completos1 = dados_limpos %>% filter(control_mean!=0&!is.na(control_mean)&treated_mean!=0&!is.na(treated_mean)&treated_variation!=0&!is.na(treated_variation))
dados_completos = dados_completos1 %>% filter(control_n!=0&!is.na(control_n)&treated_n!=0&!is.na(treated_n))
dados_completos = dados_completos %>% filter(is.na(Abeta_sequence))
dados_completos1 = dados_limpos %>% filter(control_mean!=0&!is.na(control_mean)&treated_mean!=0&!is.na(treated_mean)&treated_variation!=0&!is.na(treated_variation))
dados_completos = dados_completos1 %>% filter(control_n!=0&!is.na(control_n)&treated_n!=0&!is.na(treated_n))
dados_completos = dados_completos %>% filter(!is.na(Abeta_sequence))
dados_limpos = read_xlsx("dados_limpos-revisado.xlsx")
dados_limpos = dados_limpos %>% filter(!is.na(Abeta_sequence))
dados_completos1 = dados_limpos %>% filter(control_mean!=0&!is.na(control_mean)&treated_mean!=0&!is.na(treated_mean)&treated_variation!=0&!is.na(treated_variation))
dados_completos = dados_completos1 %>% filter(control_n!=0&!is.na(control_n)&treated_n!=0&!is.na(treated_n))
print("Total number of comparison extracted")
nrow(dados_limpos)
print("Number of papers for the complete dataset")
nrow(dados_limpos %>% count(rayyan.key))
print("Number of comparisons excluded for missing means or variation")
nrow(dados_limpos)-nrow(dados_completos1)
print("Number of comparisons excluded for missing sample sizes")
nrow(dados_completos1)-nrow(dados_completos)
dados_completos[dados_completos=="WST-1"] = "WST"
dados_completos[dados_completos=="WST-8"] = "WST"
dados_completos = dados_completos %>% rename(control_mean_original = control_mean) %>%
rename(treated_mean_original = treated_mean) %>%
rename(control_variation_original = control_variation) %>%
rename(treated_variation_original = treated_variation)
dados_completos = dados_completos %>% mutate(control_mean =
if_else(is.na(control_mean_double_check)==T, true = control_mean_original, false = control_mean_double_check))
dados_completos = dados_completos %>% mutate(treated_mean =
if_else(is.na(treated_mean_double_check)==T, true = treated_mean_original, false = treated_mean_double_check))
dados_completos = dados_completos %>% mutate(control_variation =
if_else(is.na(control_variation_double_check)==T, true = control_variation_original, false = control_variation_double_check))
dados_completos = dados_completos %>% mutate(treated_variation =
if_else(is.na(treated_variation_double_check)==T, true = treated_variation_original, false = treated_variation_double_check))
dados_completos = dados_completos %>% mutate(control_sd =
if_else(condition = variation=="SD", true = control_variation, false = (control_variation*sqrt(control_n))))
dados_completos = dados_completos %>% mutate(treated_sd =
if_else(condition = variation=="SD", true = treated_variation, false = (treated_variation*sqrt(treated_n))))
dados_analise = dados_completos %>% select(-c("doi", "title", "figure", "dep_variable", "control_name", "treated_name", "control_mean_original", "control_mean_double_check", "control_variation_original", "control_variation_double_check", "treated_mean_original", "treated_mean_double_check", "treated_variation_original", "treated_variation_double_check", "OBS_n", "OBS_general", "Passage_number", "N_cells", "N_cells_unit", "N_cells_volume", "Plate_size", "Well_area", "Culture_medium", "Medium_supplements", "Differentiation_supplements", "Differentiation_protocol", "OBS"))
save(dados_analise)
save(dados_analise, "dados_analise.R")
save(dados_analise, file = "dados_analise.R")
knitr::opts_chunk$set(echo = F)
library(readxl)
library(tidyverse)
library(knitr)
dados_limpos = read_xlsx("dados_limpos-revisado.xlsx")
dados_limpos = dados_limpos %>% filter(!is.na(Abeta_sequence))
dados_completos1 = dados_limpos %>% filter(control_mean!=0&!is.na(control_mean)&treated_mean!=0&!is.na(treated_mean)&treated_variation!=0&!is.na(treated_variation))
dados_completos = dados_completos1 %>% filter(control_n!=0&!is.na(control_n)&treated_n!=0&!is.na(treated_n))
print("Total number of comparison extracted")
nrow(dados_limpos)
print("Number of papers for the complete dataset")
nrow(dados_limpos %>% count(rayyan.key))
print("Number of comparisons excluded for missing means or variation")
nrow(dados_limpos)-nrow(dados_completos1)
print("Number of comparisons excluded for missing sample sizes")
nrow(dados_completos1)-nrow(dados_completos)
dados_completos[dados_completos=="WST-1"] = "WST"
dados_completos[dados_completos=="WST-8"] = "WST"
dados_completos = dados_completos %>% rename(control_mean_original = control_mean) %>%
rename(treated_mean_original = treated_mean) %>%
rename(control_variation_original = control_variation) %>%
rename(treated_variation_original = treated_variation)
dados_completos = dados_completos %>% mutate(control_mean =
if_else(is.na(control_mean_double_check)==T, true = control_mean_original, false = control_mean_double_check))
dados_completos = dados_completos %>% mutate(treated_mean =
if_else(is.na(treated_mean_double_check)==T, true = treated_mean_original, false = treated_mean_double_check))
dados_completos = dados_completos %>% mutate(control_variation =
if_else(is.na(control_variation_double_check)==T, true = control_variation_original, false = control_variation_double_check))
dados_completos = dados_completos %>% mutate(treated_variation =
if_else(is.na(treated_variation_double_check)==T, true = treated_variation_original, false = treated_variation_double_check))
dados_completos = dados_completos %>% mutate(control_sd =
if_else(condition = variation=="SD", true = control_variation, false = (control_variation*sqrt(control_n))))
dados_completos = dados_completos %>% mutate(treated_sd =
if_else(condition = variation=="SD", true = treated_variation, false = (treated_variation*sqrt(treated_n))))
dados_analise = dados_completos %>% select(-c("doi", "title", "figure", "dep_variable", "control_name", "treated_name", "control_mean_original", "control_mean_double_check", "control_variation_original", "control_variation_double_check", "treated_mean_original", "treated_mean_double_check", "treated_variation_original", "treated_variation_double_check", "OBS_n", "OBS_general", "Passage_number", "N_cells", "N_cells_unit", "N_cells_volume", "Plate_size", "Well_area", "Culture_medium", "Medium_supplements", "Differentiation_supplements", "Differentiation_protocol", "OBS"))
save(dados_analise, file = "dados_analise.R")
