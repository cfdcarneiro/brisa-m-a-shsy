meus_preditores = c("Concentration_uM", "Duration_hours", "Cell_density")
melhor_modelo = get_R2_for_all_predictors_3a(meus_preditores)
melhor_modelo.summary = melhor_modelo$summary
melhor_modelo.summary = melhor_modelo.summary %>% mutate(pvalor=0)
melhor_modelo.summary[1,4] = anova(multi_meta_reg@objects[[2]], btt = 2)$QMp
melhor_modelo.summary[2,4] = anova(multi_meta_reg@objects[[2]], btt = 3)$QMp
melhor_modelo.summary[3,4] = anova(multi_meta_reg@objects[[2]], btt = 4)$QMp
multi_meta_reg@objects[[2]]
confint(multi_meta_reg@objects[[2]])
mlm.variance.distribution(multi_meta_reg@objects[[2]])
#Pseudo R2:
(sum(meta2$sigma2)-sum(multi_meta_reg@objects[[2]]$sigma2))/sum(meta2$sigma2)*100
dados_uteis2 <- dados_meta_smd_max100
dados_uteis2 <-  dados_uteis2[!apply(dados_uteis2[,c("Diferentiation_method_YN", "Abeta_aggregation", "Concentration_uM", "Duration_days", "Cell_density")], 1, anyNA),]
multi_meta_reg2 <- glmulti(yi ~ Diferentiation_method_YN + Abeta_aggregation + Concentration_uM + Duration_days + Cell_density, data = dados_uteis2, level=1, fitfunction=rma.mv.glmulti, crit="aicc", confsetsize=(2^5), plotty = F)
print(multi_meta_reg2)
top <- weightable(multi_meta_reg2)
top <- top[top$aicc <= min(top$aicc) + 2,]
top
dat = dados_uteis2
meus_preditores = c( "Abeta_aggregation", "Concentration_uM", "Duration_days")
melhor_modelo = get_R2_for_all_predictors_3a(meus_preditores)
melhor_modelo.summary = melhor_modelo$summary
melhor_modelo.summary = melhor_modelo.summary %>% mutate(pvalor=0)
melhor_modelo.summary[1,4] = anova(multi_meta_reg2@objects[[1]], btt = 2)$QMp
melhor_modelo.summary[2,4] = anova(multi_meta_reg2@objects[[1]], btt = 3)$QMp
melhor_modelo.summary[3,4] = anova(multi_meta_reg2@objects[[1]], btt = 4)$QMp
multi_meta_reg2@objects[[1]]
confint(multi_meta_reg2@objects[[1]])
mlm.variance.distribution(multi_meta_reg2@objects[[1]])
#Pseudo R2:
(sum(meta2$sigma2)-sum(multi_meta_reg2@objects[[1]]$sigma2))/sum(meta2$sigma2)*100
dados_uteis3 <- dados_meta_smd_max100
dados_uteis3 <- dados_uteis3 |> mutate(differentiation_duration_adjust =
if_else(Diferentiation_method_YN=="Yes",
Diferentiation_duration_days,
0))
dados_uteis3 <-  dados_uteis3[!apply(dados_uteis3[,c("Diferentiation_method_YN", "differentiation_duration_adjust", "Abeta_aggregation", "Concentration_uM", "Duration_days", "Cell_density")], 1, anyNA),]
multi_meta_reg3 <- glmulti(yi ~ Diferentiation_method_YN + differentiation_duration_adjust +  Abeta_aggregation + Concentration_uM + Duration_days + Cell_density, data = dados_uteis3, level=1, fitfunction=rma.mv.glmulti, crit="aicc", confsetsize=(2^6), plotty = F)
print(multi_meta_reg3)
top <- weightable(multi_meta_reg3)
top <- top[top$aicc <= min(top$aicc) + 2,]
top
dat = dados_uteis3
meus_preditores = c("Abeta_aggregation", "Concentration_uM", "Duration_days")
melhor_modelo = get_R2_for_all_predictors_3a(meus_preditores)
melhor_modelo.summary = melhor_modelo$summary
melhor_modelo.summary = melhor_modelo.summary %>% mutate(pvalor=0)
melhor_modelo.summary[1,4] = anova(multi_meta_reg3@objects[[1]], btt = 2)$QMp
melhor_modelo.summary[2,4] = anova(multi_meta_reg3@objects[[1]], btt = 3)$QMp
melhor_modelo.summary[3,4] = anova(multi_meta_reg3@objects[[1]], btt = 4)$QMp
multi_meta_reg3@objects[[1]]
confint(multi_meta_reg3@objects[[1]])
mlm.variance.distribution(multi_meta_reg3@objects[[1]])
#Pseudo R2:
(sum(meta2$sigma2)-sum(multi_meta_reg3@objects[[1]]$sigma2))/sum(meta2$sigma2)*100
knitr::opts_chunk$set(echo = F)
library(tidyverse)
library(metafor)
library(metaviz)
library(glmulti)
library(knitr)
load("dados_analise.R")
dados_two_sample = dados_analise %>% filter(!is.na(control_sd)) %>% filter(control_sd!=0)
dados_one_sample = dados_analise %>% filter(is.na(control_sd)|control_sd==0)
dados_two_sample_rom = escalc(measure = "ROM", m1i = as.numeric(treated_mean), m2i = as.numeric(control_mean), sd1i = as.numeric(treated_sd), sd2i = as.numeric(control_sd), n1i = as.numeric(treated_n), n2i = as.numeric(control_n), data = dados_two_sample)
dados_one_sample_romc = escalc(measure = "ROMC", m1i = as.numeric(treated_mean), m2i = as.numeric(control_mean), sd1i = as.numeric(treated_sd), sd2i = rep(0, nrow(dados_one_sample)), ni = as.numeric(treated_n), ri = rep(0, nrow(dados_one_sample)), data = dados_one_sample)
dados_meta_ratios = rbind(dados_two_sample_rom, dados_one_sample_romc)
meta1 = rma(yi=yi, vi=vi, data = dados_meta_ratios, measure = "ROM", method = "REML", slab = rayyan.key)
summary(meta1)
confint(meta1)
#orchaRd::orchard_plot(meta1, group = "Comparison_ID", xlab = "Effect size (ratio of means)",
#    transfm = "none") +
#  scale_color_manual(values = "black") +
#  scale_fill_manual(values = "grey")
#ggsave("./Figures/orchard-ratios.png", width = 30, height = 20, units = "cm")
#orchaRd::orchard_plot(meta1, group = "Comparison_ID", xlab = "Effect size (percentr)",
#    transfm = "percentr") +
#  scale_color_manual(values = "black") +
#  scale_fill_manual(values = "grey") +
#  scale_y_continuous(n.breaks = 20)
#ggsave("./Figures/orchard-ratios-percent-scale.png", width = 30, height = 20, units = "cm")
#orchaRd::orchard_plot(meta1, group = "Comparison_ID", xlab = "Effect size (invlogit)",
#    transfm = "invlogit") +
#  scale_color_manual(values = "black") +
#  scale_fill_manual(values = "grey") +
#  scale_y_continuous(n.breaks = 20)
#ggsave("./Figures/orchard-ratios-inv-logit.png", width = 30, height = 20, units = "cm")
#orchaRd::orchard_plot(meta1, group = "Comparison_ID", xlab = "Effect size (tanh)",
#    transfm = "tanh") +
#  scale_color_manual(values = "black") +
#  scale_fill_manual(values = "grey") +
#  scale_y_continuous(n.breaks = 20)
orchaRd::orchard_plot(meta1, group = "Comparison_ID", xlab = "Cell viability in the Abeta group (% of control)",
transfm = "percent") +
scale_color_manual(values = "black") +
scale_fill_manual(values = "grey") +
scale_y_continuous(n.breaks = 20) +
theme(plot.margin = margin(0,10,0,0)) +
geom_abline(intercept = 100, slope = 0, linetype = "longdash", color = "darkgreen", size = 0.70)
ggsave("./Figures/orchard-ratios-percent.png", width = 30, height = 15, units = "cm")
meta_trimfill_R = trimfill(meta1, estimator = "R0", side = "right")
meta_trimfill_R
#Effect (% of control):
exp(meta_trimfill_R$b)
#CI.lb (%):
exp(meta_trimfill_R$ci.lb)
#CI.ub (%):
exp(meta_trimfill_R$ci.ub)
meta_trimfill_L = trimfill(meta1, estimator = "L0", side = "right")
meta_trimfill_L
#Effect (% of control):
exp(meta_trimfill_L$b)
#CI.lb (%):
exp(meta_trimfill_L$ci.lb)
#CI.ub (%):
exp(meta_trimfill_L$ci.ub)
#ggplot(dados_meta_ratios, aes(x = exp(yi), y = 1/sqrt(mean_n))) +
#  geom_point(shape = 21, fill = "grey") +
#  scale_x_continuous(name = "Cell viability in Abeta group (% of control)") +
#  scale_y_continuous(trans = "reverse", name = expression(1/sqrt(N))) +
#  theme_classic() +
#  geom_vline(xintercept = 0, linetype="dashed", color = "grey") +
#  geom_vline(xintercept = exp(meta1$beta), linetype="dashed", color = "darkgreen")
#ggsave("./Figures/funnel-plot-ratios.png")
#ggplot(dados_meta_ratios, aes(x = yi, y = 1/vi)) +
#  geom_point() +
#  scale_x_continuous(name = "Effect size (ratio of means)") +
#  scale_y_continuous(trans = "reverse", name = "1/Variance") +
#  theme_classic() +
#  geom_vline(xintercept = 0, linetype="dashed", color = "grey") +
#  geom_vline(xintercept = meta1$beta, linetype="dashed", color = "darkgreen")
#ggsave("./Figures/funnel-plot-ratios-vi.png")
ggplot(dados_meta_ratios, aes(x = exp(yi), y = 1/sqrt(vi))) +
geom_point(shape = 21, fill = "grey") +
scale_x_continuous(name = "Cell viability of Abeta group (% of control)", n.breaks = 10) +
scale_y_continuous(trans = "reverse", name = "1/SEM") +
theme_classic() +
geom_vline(xintercept = 0, linetype="dashed", color = "grey") +
geom_vline(xintercept = exp(meta1$beta), linetype="dashed", color = "darkgreen")
ggsave("./Figures/funnel-plot-ratios-sem-percent-scale.png")
regtest(x = meta1, ni = dados_meta_ratios$mean_n, predictor = "sqrtninv")
meta2 = rma.mv(yi=yi, V=vi, data = dados_meta_ratios, method = "REML", random = ~1|rayyan.key/Comparison_ID)
meta2
confint(meta2)
#As there is not function in the package metafor for estimating I^2 values for 3-level models, we imported the function from Mathias Harrer & David Daniel Ebert (https://raw.githubusercontent.com/MathiasHarrer/dmetar/master/R/mlm.variance.distribution.R)
mlm.variance.distribution = var.comp = function(x){
m = x
# Check class
if (!(class(m)[1] %in% c("rma.mv", "rma"))){
stop("x must be of class 'rma.mv'.")
}
# Check for three level model
if (m$sigma2s != 2){
stop("The model you provided does not seem to be a three-level model. This function can only be used for three-level models.")
}
# Check for right specification (nested model)
if (sum(grepl("/", as.character(m$random[[1]]))) < 1){
stop("Model must contain nested random effects. Did you use the '~ 1 | cluster/effect-within-cluster' notation in 'random'? See ?metafor::rma.mv for more details.")
}
# Get variance diagonal and calculate total variance
n = m$k.eff
vector.inv.var = 1/(diag(m$V))
sum.inv.var = sum(vector.inv.var)
sum.sq.inv.var = (sum.inv.var)^2
vector.inv.var.sq = 1/(diag(m$V)^2)
sum.inv.var.sq = sum(vector.inv.var.sq)
num = (n-1)*sum.inv.var
den = sum.sq.inv.var - sum.inv.var.sq
est.samp.var = num/den
# Calculate variance proportions
level1=((est.samp.var)/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
level2=((m$sigma2[2])/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
level3=((m$sigma2[1])/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
# Prepare df for return
Level=c("Level 1", "Level 2 (exp)", "Level 3 (art)")
Variance=c(level1, level2, level3)
df.res=data.frame(Variance)
colnames(df.res) = c("% of total variance")
rownames(df.res) = Level
I2 = c("---", round(Variance[2:3], 2))
df.res = as.data.frame(cbind(df.res, I2))
totalI2 = Variance[2] + Variance[3]
# Generate plot
df1 = data.frame("Level" = c("Sampling Error", "Total Heterogeneity"),
"Variance" = c(df.res[1,1], df.res[2,1]+df.res[3,1]),
"Type" = rep(1,2))
df2 = data.frame("Level" = rownames(df.res),
"Variance" = df.res[,1],
"Type" = rep(2,3))
df = as.data.frame(rbind(df1, df2))
g = ggplot(df, aes(fill=Level, y=Variance, x=as.factor(Type))) +
coord_cartesian(ylim = c(0,1), clip = "off") +
geom_bar(stat="identity", position="fill", width = 1, color="black") +
scale_y_continuous(labels = scales::percent)+
theme(axis.title.x=element_blank(),
axis.text.y = element_text(color="black"),
axis.line.y = element_blank(),
axis.title.y=element_blank(),
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_line(lineend = "round"),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.background = element_rect(linetype="solid",
colour ="black"),
legend.title = element_blank(),
legend.key.size = unit(0.75,"cm"),
axis.ticks.length=unit(.25, "cm"),
plot.margin = unit(c(1,3,1,1), "lines")) +
scale_fill_manual(values = c("darkseagreen3", "deepskyblue3", "darkseagreen2",
"deepskyblue1", "deepskyblue2")) +
# Add Annotation
# Total Variance
annotate("text", x = 1.5, y = 1.05,
label = paste("Total Variance:",
round(m$sigma2[1]+m$sigma2[2]+est.samp.var, 3))) +
# Sampling Error
annotate("text", x = 1, y = (df[1,2]/2+df[2,2])/100,
label = paste("Sampling Error Variance: \n", round(est.samp.var, 3)), size = 3) +
# Total I2
annotate("text", x = 1, y = ((df[2,2])/100)/2-0.02,
label = bquote("Total"~italic(I)^2*":"~.(round(df[2,2],2))*"%"), size = 3) +
annotate("text", x = 1, y = ((df[2,2])/100)/2+0.05,
label = paste("Variance not attributable \n to sampling error: \n", round(m$sigma2[1]+m$sigma2[2],3)), size = 3) +
# Level 1
annotate("text", x = 2, y = (df[1,2]/2+df[2,2])/100, label = paste("Level 1: \n",
round(df$Variance[3],2), "%", sep=""), size = 3) +
# Level 2
annotate("text", x = 2, y = (df[5,2]+(df[4,2]/2))/100,
label = bquote(italic(I)[Level2]^2*":"~.(round(df[4,2],2))*"%"), size = 3) +
# Level 3
annotate("text", x = 2, y = (df[5,2]/2)/100,
label = bquote(italic(I)[Level3]^2*":"~.(round(df[5,2],2))*"%"), size = 3)
returnlist = list(results = df.res,
totalI2 = totalI2,
plot = g)
class(returnlist) = c("mlm.variance.distribution", "list")
invisible(returnlist)
returnlist
}
mlm.variance.distribution(x = meta2)
kable(dados_meta_ratios %>% count(n_definition))
knitr::opts_chunk$set(echo = F)
library(tidyverse)
library(metafor)
library(metaviz)
library(glmulti)
library(knitr)
load("dados_analise.R")
dados_two_sample = dados_analise %>% filter(!is.na(control_sd)) %>% filter(control_sd!=0)
dados_one_sample = dados_analise %>% filter(is.na(control_sd)|control_sd==0)
dados_two_sample_rom = escalc(measure = "ROM", m1i = as.numeric(treated_mean), m2i = as.numeric(control_mean), sd1i = as.numeric(treated_sd), sd2i = as.numeric(control_sd), n1i = as.numeric(treated_n), n2i = as.numeric(control_n), data = dados_two_sample)
dados_one_sample_romc = escalc(measure = "ROMC", m1i = as.numeric(treated_mean), m2i = as.numeric(control_mean), sd1i = as.numeric(treated_sd), sd2i = rep(0, nrow(dados_one_sample)), ni = as.numeric(treated_n), ri = rep(0, nrow(dados_one_sample)), data = dados_one_sample)
dados_meta_ratios = rbind(dados_two_sample_rom, dados_one_sample_romc)
meta1 = rma(yi=yi, vi=vi, data = dados_meta_ratios, measure = "ROM", method = "REML", slab = rayyan.key)
summary(meta1)
confint(meta1)
#orchaRd::orchard_plot(meta1, group = "Comparison_ID", xlab = "Effect size (ratio of means)",
#    transfm = "none") +
#  scale_color_manual(values = "black") +
#  scale_fill_manual(values = "grey")
#ggsave("./Figures/orchard-ratios.png", width = 30, height = 20, units = "cm")
#orchaRd::orchard_plot(meta1, group = "Comparison_ID", xlab = "Effect size (percentr)",
#    transfm = "percentr") +
#  scale_color_manual(values = "black") +
#  scale_fill_manual(values = "grey") +
#  scale_y_continuous(n.breaks = 20)
#ggsave("./Figures/orchard-ratios-percent-scale.png", width = 30, height = 20, units = "cm")
#orchaRd::orchard_plot(meta1, group = "Comparison_ID", xlab = "Effect size (invlogit)",
#    transfm = "invlogit") +
#  scale_color_manual(values = "black") +
#  scale_fill_manual(values = "grey") +
#  scale_y_continuous(n.breaks = 20)
#ggsave("./Figures/orchard-ratios-inv-logit.png", width = 30, height = 20, units = "cm")
#orchaRd::orchard_plot(meta1, group = "Comparison_ID", xlab = "Effect size (tanh)",
#    transfm = "tanh") +
#  scale_color_manual(values = "black") +
#  scale_fill_manual(values = "grey") +
#  scale_y_continuous(n.breaks = 20)
orchaRd::orchard_plot(meta1, group = "Comparison_ID", xlab = "Cell viability in the Abeta group (% of control)",
transfm = "percent") +
scale_color_manual(values = "black") +
scale_fill_manual(values = "grey") +
scale_y_continuous(n.breaks = 20) +
theme(plot.margin = margin(0,10,0,0)) +
geom_abline(intercept = 100, slope = 0, linetype = "longdash", color = "darkgreen", size = 0.70)
ggsave("./Figures/orchard-ratios-percent.png", width = 30, height = 15, units = "cm")
meta_trimfill_R = trimfill(meta1, estimator = "R0", side = "right")
meta_trimfill_R
#Effect (% of control):
exp(meta_trimfill_R$b)
#CI.lb (%):
exp(meta_trimfill_R$ci.lb)
#CI.ub (%):
exp(meta_trimfill_R$ci.ub)
meta_trimfill_L = trimfill(meta1, estimator = "L0", side = "right")
meta_trimfill_L
#Effect (% of control):
exp(meta_trimfill_L$b)
#CI.lb (%):
exp(meta_trimfill_L$ci.lb)
#CI.ub (%):
exp(meta_trimfill_L$ci.ub)
#ggplot(dados_meta_ratios, aes(x = exp(yi), y = 1/sqrt(mean_n))) +
#  geom_point(shape = 21, fill = "grey") +
#  scale_x_continuous(name = "Cell viability in Abeta group (% of control)") +
#  scale_y_continuous(trans = "reverse", name = expression(1/sqrt(N))) +
#  theme_classic() +
#  geom_vline(xintercept = 0, linetype="dashed", color = "grey") +
#  geom_vline(xintercept = exp(meta1$beta), linetype="dashed", color = "darkgreen")
#ggsave("./Figures/funnel-plot-ratios.png")
#ggplot(dados_meta_ratios, aes(x = yi, y = 1/vi)) +
#  geom_point() +
#  scale_x_continuous(name = "Effect size (ratio of means)") +
#  scale_y_continuous(trans = "reverse", name = "1/Variance") +
#  theme_classic() +
#  geom_vline(xintercept = 0, linetype="dashed", color = "grey") +
#  geom_vline(xintercept = meta1$beta, linetype="dashed", color = "darkgreen")
#ggsave("./Figures/funnel-plot-ratios-vi.png")
ggplot(dados_meta_ratios, aes(x = exp(yi), y = 1/sqrt(vi))) +
geom_point(shape = 21, fill = "grey") +
scale_x_continuous(name = "Cell viability of Abeta group (% of control)", n.breaks = 10) +
scale_y_continuous(trans = "reverse", name = "1/SEM") +
theme_classic() +
geom_vline(xintercept = 0, linetype="dashed", color = "grey") +
geom_vline(xintercept = exp(meta1$beta), linetype="dashed", color = "darkgreen")
ggsave("./Figures/funnel-plot-ratios-sem-percent-scale.png")
regtest(x = meta1, ni = dados_meta_ratios$mean_n, predictor = "sqrtninv")
meta2 = rma.mv(yi=yi, V=vi, data = dados_meta_ratios, method = "REML", random = ~1|rayyan.key/Comparison_ID)
meta2
confint(meta2)
#As there is not function in the package metafor for estimating I^2 values for 3-level models, we imported the function from Mathias Harrer & David Daniel Ebert (https://raw.githubusercontent.com/MathiasHarrer/dmetar/master/R/mlm.variance.distribution.R)
mlm.variance.distribution = var.comp = function(x){
m = x
# Check class
if (!(class(m)[1] %in% c("rma.mv", "rma"))){
stop("x must be of class 'rma.mv'.")
}
# Check for three level model
if (m$sigma2s != 2){
stop("The model you provided does not seem to be a three-level model. This function can only be used for three-level models.")
}
# Check for right specification (nested model)
if (sum(grepl("/", as.character(m$random[[1]]))) < 1){
stop("Model must contain nested random effects. Did you use the '~ 1 | cluster/effect-within-cluster' notation in 'random'? See ?metafor::rma.mv for more details.")
}
# Get variance diagonal and calculate total variance
n = m$k.eff
vector.inv.var = 1/(diag(m$V))
sum.inv.var = sum(vector.inv.var)
sum.sq.inv.var = (sum.inv.var)^2
vector.inv.var.sq = 1/(diag(m$V)^2)
sum.inv.var.sq = sum(vector.inv.var.sq)
num = (n-1)*sum.inv.var
den = sum.sq.inv.var - sum.inv.var.sq
est.samp.var = num/den
# Calculate variance proportions
level1=((est.samp.var)/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
level2=((m$sigma2[2])/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
level3=((m$sigma2[1])/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
# Prepare df for return
Level=c("Level 1", "Level 2 (exp)", "Level 3 (art)")
Variance=c(level1, level2, level3)
df.res=data.frame(Variance)
colnames(df.res) = c("% of total variance")
rownames(df.res) = Level
I2 = c("---", round(Variance[2:3], 2))
df.res = as.data.frame(cbind(df.res, I2))
totalI2 = Variance[2] + Variance[3]
# Generate plot
df1 = data.frame("Level" = c("Sampling Error", "Total Heterogeneity"),
"Variance" = c(df.res[1,1], df.res[2,1]+df.res[3,1]),
"Type" = rep(1,2))
df2 = data.frame("Level" = rownames(df.res),
"Variance" = df.res[,1],
"Type" = rep(2,3))
df = as.data.frame(rbind(df1, df2))
g = ggplot(df, aes(fill=Level, y=Variance, x=as.factor(Type))) +
coord_cartesian(ylim = c(0,1), clip = "off") +
geom_bar(stat="identity", position="fill", width = 1, color="black") +
scale_y_continuous(labels = scales::percent)+
theme(axis.title.x=element_blank(),
axis.text.y = element_text(color="black"),
axis.line.y = element_blank(),
axis.title.y=element_blank(),
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_line(lineend = "round"),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.background = element_rect(linetype="solid",
colour ="black"),
legend.title = element_blank(),
legend.key.size = unit(0.75,"cm"),
axis.ticks.length=unit(.25, "cm"),
plot.margin = unit(c(1,3,1,1), "lines")) +
scale_fill_manual(values = c("darkseagreen3", "deepskyblue3", "darkseagreen2",
"deepskyblue1", "deepskyblue2")) +
# Add Annotation
# Total Variance
annotate("text", x = 1.5, y = 1.05,
label = paste("Total Variance:",
round(m$sigma2[1]+m$sigma2[2]+est.samp.var, 3))) +
# Sampling Error
annotate("text", x = 1, y = (df[1,2]/2+df[2,2])/100,
label = paste("Sampling Error Variance: \n", round(est.samp.var, 3)), size = 3) +
# Total I2
annotate("text", x = 1, y = ((df[2,2])/100)/2-0.02,
label = bquote("Total"~italic(I)^2*":"~.(round(df[2,2],2))*"%"), size = 3) +
annotate("text", x = 1, y = ((df[2,2])/100)/2+0.05,
label = paste("Variance not attributable \n to sampling error: \n", round(m$sigma2[1]+m$sigma2[2],3)), size = 3) +
# Level 1
annotate("text", x = 2, y = (df[1,2]/2+df[2,2])/100, label = paste("Level 1: \n",
round(df$Variance[3],2), "%", sep=""), size = 3) +
# Level 2
annotate("text", x = 2, y = (df[5,2]+(df[4,2]/2))/100,
label = bquote(italic(I)[Level2]^2*":"~.(round(df[4,2],2))*"%"), size = 3) +
# Level 3
annotate("text", x = 2, y = (df[5,2]/2)/100,
label = bquote(italic(I)[Level3]^2*":"~.(round(df[5,2],2))*"%"), size = 3)
returnlist = list(results = df.res,
totalI2 = totalI2,
plot = g)
class(returnlist) = c("mlm.variance.distribution", "list")
invisible(returnlist)
returnlist
}
mlm.variance.distribution(x = meta2)
#kable(dados_meta_ratios %>% count(n_definition))
dados_meta_ratios_independent = dados_meta_ratios %>% filter(
n_definition=="independent determinations" |
n_definition=="independent experimental measurements" |
n_definition=="independent experiments" |
n_definition=="independent repetitions" |
n_definition=="independent replicates" |
n_definition=="independent runs" |
n_definition=="independent sets of studies")
#meta3 = rma.mv(yi=yi, V=vi, data = dados_meta_ratios_independent, method = "REML", random = ~1|rayyan.key/Comparison_ID)
#meta3
#confint(meta3)
#mlm.variance.distribution(x = meta3)
#meta_differentiation = rma.mv(yi=yi, V=vi, data = dados_meta_ratios, method = "REML", random = ~1|rayyan.key/Comparison_ID, mods = ~relevel(factor(dados_meta_ratios$Diferentiation_method), ref="No differentiation"))
#meta_differentiation
#mlm.variance.distribution(meta_differentiation)
dados_meta_ratios = dados_meta_ratios |> mutate(Diferentiation_method_YN = if_else(
Diferentiation_method == "No differentiation",
"No",
"Yes"
))
meta_differentiationYN = rma.mv(yi=yi, V=vi, data = dados_meta_ratios, method = "REML", random = ~1|rayyan.key/Comparison_ID, mods = ~relevel(factor(dados_meta_ratios$Diferentiation_method_YN), ref="No"))
meta_differentiationYN
mlm.variance.distribution(meta_differentiationYN)
#fig_differentiation =
#  ggplot(dados_meta_ratios, aes(x = Diferentiation_method, y=yi, size = 1/sqrt(vi))) +
#  geom_point(shape = 1, position =  position_jitterdodge(dodge.width = 0), stroke = 1) +
#  labs(y = "Ratio of means", x = "Differentiation method") +
#  theme_classic() +
#  scale_size_continuous(guide = "none") +
#  theme(legend.position = "bottom") +
#  scale_y_continuous(n.breaks = 7) +
#  geom_abline(yintercept = 0, slope = 0, linetype = "dashed", color = "grey")
#ggsave("./Figures/fig_differentiation-ratios.png")
fig_differentiationYN =
ggplot(dados_meta_ratios, aes(x = Diferentiation_method_YN, y=exp(yi), size = 1/sqrt(vi))) +
geom_point(shape = 21, position =  position_jitterdodge(dodge.width = 0), stroke = 0.5, fill = "grey") +
labs(y = "Cell viability (% of control)", x = "Differentiated cells") +
theme_classic() +
scale_size_continuous(guide = "none") +
theme(legend.position = "bottom") +
scale_y_continuous(n.breaks = 7) +
geom_hline(yintercept = 1, linetype = "dashed", color = "grey")
fig_differentiationYN
ggsave("./Figures/fig_differentiation-ratios-sim-nao.png", height = 10, width = 10, units = "cm")
meta_difduration = rma.mv(yi=yi, V=vi, data = dados_meta_ratios, method = "REML", random = ~1|rayyan.key/Comparison_ID, mods = ~as.numeric(dados_meta_ratios$Diferentiation_duration_days))
meta_difduration
mlm.variance.distribution(meta_difduration)
#fig_difduration =
#  ggplot(dados_meta_ratios, aes(x = as.numeric(Diferentiation_duration_days), y=yi, size = 1/sqrt(vi))) +
#  geom_point(shape = 1, stroke = 1) +
#  labs(y = "Ratio of means", x = "Duration of differentiation (days)") +
#  theme_classic() +
#  scale_size_continuous(guide = "none") +
#  theme(legend.position = "bottom") +
#  scale_y_continuous(n.breaks = 7) +
#  scale_x_continuous(n.breaks = 7) +
#  geom_abline(slope = 0, linetype = "dashed", color = "grey")
#ggsave("./Figures/fig_difduration-ratios.png")
fig_difduration_ =
ggplot(dados_meta_ratios, aes(x = as.numeric(Diferentiation_duration_days), y=exp(yi), size = 1/sqrt(vi))) +
geom_point(shape = 21, fill = "grey", stroke = 0.5) +
labs(y = "Cell viability (% of control)", x = "Duration of differentiation (days)") +
theme_classic() +
scale_size_continuous(guide = "none") +
theme(legend.position = "bottom") +
scale_y_continuous(n.breaks = 7) +
scale_x_continuous(n.breaks = 7) +
geom_hline(yintercept = 1, linetype = "dashed", color = "grey")
fig_difduration_
ggsave("./Figures/fig_difduration-ratios-percent-scale.png", height = 10, width = 10, units = "cm")
meta_aggregation = rma.mv(yi=yi, V=vi, data = dados_meta_ratios, method = "REML", random = ~1|rayyan.key/Comparison_ID, mods = ~relevel(factor(dados_meta_ratios$Abeta_aggregation), ref="Monomers"))
meta_aggregation
mlm.variance.distribution(meta_aggregation)
exp(meta_aggregation$b[4])
exp(meta_aggregation$ci.lb[4])
exp(meta_aggregation$ci.ub[4])
