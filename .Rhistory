# Total Variance
annotate("text", x = 1.5, y = 1.05,
label = paste("Total Variance:",
round(m$sigma2[1]+m$sigma2[2]+est.samp.var, 3))) +
# Sampling Error
annotate("text", x = 1, y = (df[1,2]/2+df[2,2])/100,
label = paste("Sampling Error Variance: \n", round(est.samp.var, 3)), size = 3) +
# Total I2
annotate("text", x = 1, y = ((df[2,2])/100)/2-0.02,
label = bquote("Total"~italic(I)^2*":"~.(round(df[2,2],2))*"%"), size = 3) +
annotate("text", x = 1, y = ((df[2,2])/100)/2+0.05,
label = paste("Variance not attributable \n to sampling error: \n", round(m$sigma2[1]+m$sigma2[2],3)), size = 3) +
# Level 1
annotate("text", x = 2, y = (df[1,2]/2+df[2,2])/100, label = paste("Level 1: \n",
round(df$Variance[3],2), "%", sep=""), size = 3) +
# Level 2
annotate("text", x = 2, y = (df[5,2]+(df[4,2]/2))/100,
label = bquote(italic(I)[Level2]^2*":"~.(round(df[4,2],2))*"%"), size = 3) +
# Level 3
annotate("text", x = 2, y = (df[5,2]/2)/100,
label = bquote(italic(I)[Level3]^2*":"~.(round(df[5,2],2))*"%"), size = 3)
returnlist = list(results = df.res,
totalI2 = totalI2,
plot = g)
class(returnlist) = c("mlm.variance.distribution", "list")
invisible(returnlist)
returnlist
}
mlm.variance.distribution(x = meta2)
#meta_differentiation = rma.mv(yi=yi, V=vi, data = dados_meta_smd, method = "REML", random = ~1|rayyan.key/Comparison_ID, mods = ~relevel(factor(dados_meta_smd$Diferentiation_method), ref="No differentiation"))
#meta_differentiation
#mlm.variance.distribution(meta_differentiation)
dados_meta_smd = dados_meta_smd |> mutate(Diferentiation_method_YN = if_else(
Diferentiation_method == "No differentiation",
"No",
"Yes"
))
#meta_differentiationYN = rma.mv(yi=yi, V=vi, data = dados_meta_smd, method = "REML", random = ~1|rayyan.key/Comparison_ID, mods = ~relevel(factor(dados_meta_smd$Diferentiation_method_YN), ref="No"))
#meta_differentiationYN
#mlm.variance.distribution(meta_differentiationYN)
#fig_differentiationYN =
#  ggplot(dados_meta_smd, aes(x = Diferentiation_method_YN, y=yi, size = 1/sqrt(vi))) +
#  geom_point(shape = 21, position =  position_jitterdodge(dodge.width = 0), stroke = 0.5, fill = "grey") +
#  labs(y = "Effect size (Hedge's g)", x = "Differentiated cells") +
#  theme_classic() +
#  scale_size_continuous(guide = "none") +
#  theme(legend.position = "bottom") +
#  scale_y_continuous(n.breaks = 7) +
#  geom_hline(yintercept = 1, linetype = "dashed", color = "grey")
#fig_differentiationYN
#ggsave("./Figures/fig_differentiation-smd-sim-nao.png", height = 10, width = 10, units = "cm")
dados_meta_smd = dados_meta_smd |> mutate(Diferentiation_duration_YN = if_else(
Diferentiation_method_YN == "No",
0,
Diferentiation_duration_days
))
meta_difduration = rma.mv(yi=yi, V=vi, data = dados_meta_smd, method = "REML", random = ~1|rayyan.key/Comparison_ID, mods = ~as.numeric(dados_meta_smd$Diferentiation_duration_YN))
meta_difduration
mlm.variance.distribution(meta_difduration)
#pseudo R-squared
meta_difduration.R2 = (sum(meta2$sigma2)-sum(meta_difduration$sigma2))/sum(meta2$sigma2)*100
meta_difduration.R2 = if_else(meta_difduration.R2<0, 0, meta_difduration.R2)
fig_difduration_ =
ggplot(dados_meta_smd, aes(x = as.numeric(Diferentiation_duration_YN), y=yi, size = 1/sqrt(vi))) +
geom_point(shape = 21, fill = "grey", stroke = 0.5) +
labs(y = "Effect size (Hedge's g)", x = "Duration of differentiation (days)") +
theme_classic() +
scale_size_continuous(guide = "none") +
theme(legend.position = "bottom") +
scale_y_continuous(n.breaks = 7) +
scale_x_continuous(n.breaks = 7) +
geom_hline(yintercept = 1, linetype = "dashed", color = "grey")
fig_difduration_
ggsave("./Figures/fig_difduration-smd.png", height = 10, width = 10, units = "cm")
meta_aggregation = rma.mv(yi=yi, V=vi, data = dados_meta_smd, method = "REML", random = ~1|rayyan.key/Comparison_ID, mods = ~relevel(factor(dados_meta_smd$Abeta_aggregation), ref="Unclear"))
meta_aggregation
mlm.variance.distribution(meta_aggregation)
#pseudo R-squared
meta_aggregation.R2 = (sum(meta2$sigma2)-sum(meta_aggregation$sigma2))/sum(meta2$sigma2)*100
meta_aggregation.R2 = if_else(meta_aggregation.R2<0, 0, meta_aggregation.R2)
fig_agregation_ =
ggplot(dados_meta_smd, aes(x = Abeta_aggregation, y=yi, size = 1/sqrt(vi))) +
geom_point(shape = 21, fill = "grey", position =  position_jitterdodge(dodge.width = 0), stroke = 0.5) +
labs(y = "Effect size (Hedge's g)", x = "Abeta aggregation") +
theme_classic() +
scale_size_continuous(guide = "none") +
theme(legend.position = "bottom") +
scale_y_continuous(n.breaks = 7) +
scale_x_discrete(limits = c("Monomers", "Oligomers", "Fibers", "Unclear")) +
geom_hline(yintercept = 1, linetype = "dashed", color = "grey")
fig_agregation_
ggsave("./Figures/fig_agregation-smd-percent-scale.png", height = 10, width = 10, units = "cm")
dados_meta_smd_max100 = dados_meta_smd %>% filter(Concentration_uM<100)
meta_concent = rma.mv(yi=yi, V=vi, data = dados_meta_smd_max100, method = "REML", random = ~1|rayyan.key/Comparison_ID, mods = ~dados_meta_smd_max100$Concentration_uM)
meta_concent
mlm.variance.distribution(meta_concent)
#pseudo R-squared
meta_concent.R2 = (sum(meta2$sigma2)-sum(meta_concent$sigma2))/sum(meta2$sigma2)*100
meta_concent.R2 = if_else(meta_concent.R2<0, 0, meta_concent.R2)
fig_concent_ =
ggplot(dados_meta_smd_max100, aes(x = Concentration_uM, y=yi, size = 1/sqrt(vi))) +
geom_point(shape = 21, fill = "grey", stroke = 0.5) +
labs(y = "Effect size (Hedge's g)", x = "Abeta concentration (uM)") +
theme_classic() +
scale_size_continuous(guide = "none") +
theme(legend.position = "bottom") +
scale_y_continuous(n.breaks = 7) +
scale_x_continuous(n.breaks = 7) +
geom_hline(yintercept = 1, linetype = "dashed", color = "grey")
fig_concent_
ggsave("./Figures/fig_concent-smd.png", height = 10, width = 10, units = "cm")
meta_duration = rma.mv(yi=yi, V=vi, data = dados_meta_smd, method = "REML", random = ~1|rayyan.key/Comparison_ID, mods = ~as.numeric(dados_meta_smd$Duration_days))
meta_duration
mlm.variance.distribution(meta_duration)
#pseudo R-squared
meta_duration.R2 = (sum(meta2$sigma2)-sum(meta_duration$sigma2))/sum(meta2$sigma2)*100
meta_duration.R2 = if_else(meta_duration.R2<0, 0, meta_duration.R2)
fig_duration_ =
ggplot(dados_meta_smd, aes(x = as.numeric(Duration_days), y=yi, size = 1/sqrt(vi))) +
geom_point(shape = 21, fill = "grey", stroke = 0.5) +
labs(y = "Effect size (Hedge's g)", x = "Abeta duration of exposure (days)") +
theme_classic() +
scale_size_continuous(guide = "none") +
theme(legend.position = "bottom") +
scale_y_continuous(n.breaks = 7) +
scale_x_continuous(n.breaks = 7) +
geom_hline(yintercept = 1, linetype = "dashed", color = "grey")
fig_duration_
ggsave("./Figures/fig_duration-smd.png", height = 10, width = 10, units = "cm")
meta_assay = rma.mv(yi=yi, V=vi, data = dados_meta_smd, method = "REML", random = ~1|rayyan.key/Comparison_ID, mods = ~relevel(factor(dados_meta_smd$Assay), ref="MTT"))
meta_assay
mlm.variance.distribution(meta_assay)
#pseudo R-squared
meta_assay.R2 = (sum(meta2$sigma2)-sum(meta_assay$sigma2))/sum(meta2$sigma2)*100
meta_assay.R2 = if_else(meta_assay.R2<0, 0, meta_assay.R2)
fig_assay_ =
ggplot(dados_meta_smd, aes(x = Assay, y=yi, size = 1/sqrt(vi))) +
geom_point(shape = 21, fill = "grey", position =  position_jitterdodge(dodge.width = 0), stroke = 0.5) +
labs(y = "Effect size (Hedge's g)", x = "Assay") +
theme_classic() +
scale_size_continuous(guide = "none") +
theme(legend.position = "bottom") +
scale_y_continuous(n.breaks = 7) +
scale_x_discrete(limits = c("MTT", "WST", "CCK-8", "MTS", "XTT", "Resazurin", "EZ4U")) +
geom_hline(yintercept = 1, linetype = "dashed", color = "grey")
fig_assay_
ggsave("./Figures/fig_assay-smd.png", height = 10, width = 10, units = "cm")
meta_density = rma.mv(yi=yi, V=vi, data = dados_meta_smd, method = "REML", random = ~1|rayyan.key/Comparison_ID, mods = ~as.numeric(dados_meta_smd$Cell_density))
meta_density
mlm.variance.distribution(meta_density)
#pseudo R-squared
meta_density.R2 = (sum(meta2$sigma2)-sum(meta_density$sigma2))/sum(meta2$sigma2)*100
meta_density.R2 = if_else(meta_density.R2<0, 0, meta_density.R2)
fig_density_ =
ggplot(dados_meta_smd, aes(x = as.numeric(Cell_density), y=yi, size = 1/sqrt(vi))) +
geom_point(shape = 21, fill = "grey", stroke = 1) +
labs(y = "Effect size (Hedge's g)", x = "Cell density (log10 scale)") +
theme_classic() +
scale_size_continuous(guide = "none") +
theme(legend.position = "bottom") +
scale_y_continuous(n.breaks = 7) +
scale_x_continuous(trans = "log10") +
geom_hline(yintercept = 1, linetype = "dashed", color = "grey")
fig_density_
ggsave("./Figures/fig_density-smd.png", height = 10, width = 10, units = "cm")
dados_meta_smd = dados_meta_smd |> mutate(cell_density_1000 = Cell_density*(10^3))
meta_density = rma.mv(yi=yi, V=vi, data = dados_meta_smd, method = "REML", random = ~1|rayyan.key/Comparison_ID, mods = ~as.numeric(dados_meta_smd$cell_density_1000))
meta_density
mlm.variance.distribution(meta_density)
#pseudo R-squared
meta_density.R2 = (sum(meta2$sigma2)-sum(meta_density$sigma2))/sum(meta2$sigma2)*100
meta_density.R2 = if_else(meta_density.R2<0, 0, meta_density.R2)
fig_density_1000 =
ggplot(dados_meta_ratios, aes(x = as.numeric(cell_density_1000), y=exp(yi), size = 1/sqrt(vi))) +
geom_point(shape = 21, fill = "grey", stroke = 1) +
labs(y = "Cell viability (% of control)", x = "Cell density (log10 scale)") +
theme_classic() +
scale_size_continuous(guide = "none") +
theme(legend.position = "bottom") +
scale_y_continuous(n.breaks = 7) +
scale_x_continuous(trans = "log10") +
geom_hline(yintercept = 1, linetype = "dashed", color = "grey")
fig_density_
ggsave("./Figures/fig_density-ratios-percent-change-1000.png", height = 10, width = 10, units = "cm")
rma.mv.glmulti <- function(formula, data, ...)
rma.mv(formula, vi, data=data, method="ML", random = ~1|rayyan.key/Comparison_ID, verbose = FALSE, ...)
# Create the list of all combinations of predictors for which you want to get R2 - returns the formula string, e.g. "~ a + b".
build_model_combinations = function (todos_preditores, preditor_interesse){
outros_preditores = todos_preditores[todos_preditores != preditor_interesse]
reduced_models = c("", map(1:length(outros_preditores), function (i) {
paste0("~ ", apply(combn(outros_preditores, i), MARGIN = 2, paste0, collapse = " + "))
}) |> unlist())
full_models = map_chr(reduced_models, function (f) {
if (f == "") {
return (paste0("~ ", preditor_interesse) )
} else {
return (paste0(f, " + ", preditor_interesse) )
}
})
list(full_models = full_models, reduced_models = reduced_models)
}
# Runs all models, full x reduced, from the formulas created above and calculates the difference between R2 values.
all_model_comparisons_3a = function (comparison_list) {
map2_dfr(comparison_list$reduced_models, comparison_list$full_models, function (m0s, m1s) {
if (m0s == "") {
m0 = rma(yi, vi, data=dat, method="ML", control = list(maxiter = 3000))
} else {
m0f = as.formula(m0s)
m0 = rma.mv(yi, vi, random = ~1|rayyan.key/Comparison_ID, mods = m0f, data=dat, method="ML", control = list(maxiter = 3000))
}
m1f = as.formula(m1s)
m1 = rma.mv(yi, vi, random = ~1|rayyan.key/Comparison_ID, mods = m1f, data=dat, method="ML", control = list(maxiter = 3000))
m2 = rma.mv(yi=yi, V=vi, data = dat, method = "REML", random = ~1|rayyan.key/Comparison_ID, control = list(maxiter = 3000))
reduced_model_size = length(all.vars(m1f)) - 1
tibble(reduced = m0s, full = m1s, R2 = ((sum(m2$sigma2)-sum(m1$sigma2))/sum(m2$sigma2)*100)-((sum(m2$sigma2)-sum(m0$sigma2))/sum(m2$sigma2)*100), permutations = factorial(reduced_model_size))
})
}
get_R2_for_single_predictor_3a = function (todos_preditores, preditor_interesse) {
comparison_list = build_model_combinations(todos_preditores, preditor_interesse)
r = all_model_comparisons_3a(comparison_list)
s = mean(r$R2, na.rm = T)
ws = weighted.mean(r$R2, r$permutations, na.rm = T)
list(all_predictors = todos_preditores, predictor = preditor_interesse, results = r, mean = s, wmean = ws)
}
get_R2_for_all_predictors_3a = function (todos_preditores) {
df = map(todos_preditores, function (preditor_interesse) {
print(paste("Running models for", preditor_interesse))
get_R2_for_single_predictor_3a(todos_preditores, preditor_interesse)
})
s = tibble(mean_R2 = map_dbl(df, "mean"), weighted_mean_R2 = map_dbl(df, "wmean"), predictor = map_chr(df, "predictor"))
list(full_results = df, summary = s)
}
dados_uteis <- dados_meta_smd_max100
dados_uteis <-  dados_uteis[!apply(dados_uteis[,c("Diferentiation_method", "Abeta_aggregation", "Assay", "Diferentiation_duration_days", "Concentration_uM", "Duration_days", "Cell_density")], 1, anyNA),]
multi_meta_reg <- glmulti(yi ~ Diferentiation_method + Abeta_aggregation + Assay + Diferentiation_duration_days + Concentration_uM + Duration_hours + Cell_density, data = dados_uteis, level=1, fitfunction=rma.mv.glmulti, crit="aicc", confsetsize=(2^7), plotty = F)
print(multi_meta_reg)
top <- weightable(multi_meta_reg)
top <- top[top$aicc <= min(top$aicc) + 2,]
top
dat = dados_uteis
meus_preditores = c("Concentration_uM", "Duration_hours")
melhor_modelo = get_R2_for_all_predictors_3a(meus_preditores)
melhor_modelo.summary = melhor_modelo$summary
melhor_modelo.summary = melhor_modelo.summary %>% mutate(pvalor=0)
melhor_modelo.summary[1,4] = anova(multi_meta_reg@objects[[1]], btt = 2)$QMp
melhor_modelo.summary[2,4] = anova(multi_meta_reg@objects[[1]], btt = 3)$QMp
multi_meta_reg@objects[[1]]
confint(multi_meta_reg@objects[[1]])
mlm.variance.distribution(multi_meta_reg@objects[[1]])
#Pseudo R2:
(sum(meta2$sigma2)-sum(multi_meta_reg@objects[[1]]$sigma2))/sum(meta2$sigma2)*100
dat = dados_uteis
meus_preditores = c("Concentration_uM", "Duration_hours", "Cell_density")
melhor_modelo = get_R2_for_all_predictors_3a(meus_preditores)
melhor_modelo.summary = melhor_modelo$summary
melhor_modelo.summary = melhor_modelo.summary %>% mutate(pvalor=0)
melhor_modelo.summary[1,4] = anova(multi_meta_reg@objects[[2]], btt = 2)$QMp
melhor_modelo.summary[2,4] = anova(multi_meta_reg@objects[[2]], btt = 3)$QMp
melhor_modelo.summary[3,4] = anova(multi_meta_reg@objects[[2]], btt = 4)$QMp
multi_meta_reg@objects[[2]]
confint(multi_meta_reg@objects[[2]])
mlm.variance.distribution(multi_meta_reg@objects[[2]])
#Pseudo R2:
(sum(meta2$sigma2)-sum(multi_meta_reg@objects[[2]]$sigma2))/sum(meta2$sigma2)*100
dados_uteis2 <- dados_meta_smd_max100
dados_uteis2 <-  dados_uteis2[!apply(dados_uteis2[,c("Diferentiation_method_YN", "Abeta_aggregation", "Concentration_uM", "Duration_days", "Cell_density")], 1, anyNA),]
multi_meta_reg2 <- glmulti(yi ~ Diferentiation_method_YN + Abeta_aggregation + Concentration_uM + Duration_days + Cell_density, data = dados_uteis2, level=1, fitfunction=rma.mv.glmulti, crit="aicc", confsetsize=(2^5), plotty = F)
print(multi_meta_reg2)
top <- weightable(multi_meta_reg2)
top <- top[top$aicc <= min(top$aicc) + 2,]
top
dat = dados_uteis2
meus_preditores = c( "Abeta_aggregation", "Concentration_uM", "Duration_days")
melhor_modelo = get_R2_for_all_predictors_3a(meus_preditores)
melhor_modelo.summary = melhor_modelo$summary
melhor_modelo.summary = melhor_modelo.summary %>% mutate(pvalor=0)
melhor_modelo.summary[1,4] = anova(multi_meta_reg2@objects[[1]], btt = 2)$QMp
melhor_modelo.summary[2,4] = anova(multi_meta_reg2@objects[[1]], btt = 3)$QMp
melhor_modelo.summary[3,4] = anova(multi_meta_reg2@objects[[1]], btt = 4)$QMp
multi_meta_reg2@objects[[1]]
confint(multi_meta_reg2@objects[[1]])
mlm.variance.distribution(multi_meta_reg2@objects[[1]])
#Pseudo R2:
(sum(meta2$sigma2)-sum(multi_meta_reg2@objects[[1]]$sigma2))/sum(meta2$sigma2)*100
dados_uteis3 <- dados_meta_smd_max100
dados_uteis3 <- dados_uteis3 |> mutate(differentiation_duration_adjust =
if_else(Diferentiation_method_YN=="Yes",
Diferentiation_duration_days,
0))
dados_uteis3 <-  dados_uteis3[!apply(dados_uteis3[,c("Diferentiation_method_YN", "differentiation_duration_adjust", "Abeta_aggregation", "Concentration_uM", "Duration_days", "Cell_density")], 1, anyNA),]
multi_meta_reg3 <- glmulti(yi ~ Diferentiation_method_YN + differentiation_duration_adjust +  Abeta_aggregation + Concentration_uM + Duration_days + Cell_density, data = dados_uteis3, level=1, fitfunction=rma.mv.glmulti, crit="aicc", confsetsize=(2^6), plotty = F)
print(multi_meta_reg3)
top <- weightable(multi_meta_reg3)
top <- top[top$aicc <= min(top$aicc) + 2,]
top
dat = dados_uteis3
meus_preditores = c("Abeta_aggregation", "Concentration_uM", "Duration_days")
melhor_modelo = get_R2_for_all_predictors_3a(meus_preditores)
melhor_modelo.summary = melhor_modelo$summary
melhor_modelo.summary = melhor_modelo.summary %>% mutate(pvalor=0)
melhor_modelo.summary[1,4] = anova(multi_meta_reg3@objects[[1]], btt = 2)$QMp
melhor_modelo.summary[2,4] = anova(multi_meta_reg3@objects[[1]], btt = 3)$QMp
melhor_modelo.summary[3,4] = anova(multi_meta_reg3@objects[[1]], btt = 4)$QMp
View(dados_analise)
knitr::opts_chunk$set(echo = F)
kable(dados_meta_ratios %>% count(n_definition))
library(kableExtra)
kable(dados_meta_ratios %>% count(n_definition))
dados_meta_ratios_independent
View(dados_meta_ratios_independent)
library
library(dplyr)
kable(dados_meta_ratios %>% count(n_definition))
ggplot(dados_meta_ratios, aes(x = 100*(exp(yi)), y = 1/sqrt(vi))) +
geom_point(shape = 21, fill = "grey") +
scale_x_continuous(name = "Cell viability of Abeta group (% of control)", n.breaks = 10) +
scale_y_continuous(trans = "reverse", name = "1/SEM") +
theme_classic() +
geom_vline(xintercept = 0, linetype="dashed", color = "grey") +
geom_vline(xintercept = exp(meta1$beta), linetype="dashed", color = "darkgreen")
library(tidyverse)
library(metafor)
library(metaviz)
library(glmulti)
library(knitr)
ggplot(dados_meta_ratios, aes(x = 100*(exp(yi)), y = 1/sqrt(vi))) +
geom_point(shape = 21, fill = "grey") +
scale_x_continuous(name = "Cell viability of Abeta group (% of control)", n.breaks = 10) +
scale_y_continuous(trans = "reverse", name = "1/SEM") +
theme_classic() +
geom_vline(xintercept = 0, linetype="dashed", color = "grey") +
geom_vline(xintercept = exp(meta1$beta), linetype="dashed", color = "darkgreen")
ggplot(dados_meta_ratios, aes(x = 100*(exp(yi)), y = 1/sqrt(vi))) +
geom_point(shape = 21, fill = "grey") +
scale_x_continuous(name = "Cell viability of Abeta group (% of control)", n.breaks = 10) +
scale_y_continuous(trans = "reverse", name = "1/SEM") +
theme_classic() +
geom_vline(xintercept = 0, linetype="dashed", color = "grey") +
geom_vline(xintercept = 100*(exp(meta1$beta)), linetype="dashed", color = "darkgreen")
funnel.rma(meta1)
funnel.rma(meta1, yaxis = "seinv")
funnel.rma(meta1, yaxis = "seinv", pch = 1, pch.fill = 16)
funnel.rma(meta1, yaxis = "seinv", pch = 1, pch.fill = 17)
ggplot(dados_meta_ratios_max100, aes(x = Concentration_uM)) +
geom_histogram(fill = "grey", color = "black", binwidth = 1) +
labs(x = "Abeta concentration (uM)", y = "Count") +
theme_classic() +
theme(legend.position = "bottom") +
scale_x_continuous(n.breaks = 7) +
scale_y_continuous(n.breaks = 7)
ggsave("histograma-concentracao.png")
ggplot(dados_meta_ratios_max100, aes(x = Concentration_uM)) +
geom_histogram(fill = "grey", color = "black", binwidth = 1) +
labs(x = "Abeta concentration (uM)", y = "Count") +
theme_classic() +
theme(legend.position = "bottom") +
scale_x_continuous(n.breaks = 7) +
scale_y_continuous(n.breaks = 7)
ggplot(dados_meta_ratios, aes(x = 100*(exp(yi)), y = 1/sqrt(vi))) +
geom_point(shape = 21, fill = "grey") +
scale_x_continuous(name = "Cell viability of Abeta group (% of control)", n.breaks = 10) +
scale_y_continuous(trans = "reverse", name = "1/SEM") +
theme_classic() +
geom_vline(xintercept = 0, linetype="dashed", color = "grey") +
geom_vline(xintercept = 100*(exp(meta1$beta)), linetype="dashed", color = "darkgreen")
knitr::opts_chunk$set(echo = F)
library(tidyverse)
library(metafor)
library(metaviz)
library(glmulti)
library(knitr)
orchaRd::orchard_plot(meta1, group = "Comparison_ID", xlab = "Effect size (Hedge's g)") +
scale_color_manual(values = "black") +
scale_fill_manual(values = "grey") +
scale_y_continuous(n.breaks = 20) +
theme(plot.margin = margin(0,10,0,0), text = element_text(size = 12)) +
geom_abline(intercept = 0, slope = 0, linetype = "longdash", color = "darkgreen", size = 0.70)
ggsave("./Figures/orchard-smd.png", width = 20, height = 10, units = "cm")
knitr::opts_chunk$set(echo = F)
library(tidyverse)
library(metafor)
library(metaviz)
library(glmulti)
library(knitr)
load("dados_analise.R")
dados_two_sample = dados_analise %>% filter(!is.na(control_sd)) %>% filter(control_sd!=0)
dados_one_sample = dados_analise %>% filter(is.na(control_sd)|control_sd==0)
dados_two_sample_smd = escalc(measure = "SMD", m1i = as.numeric(treated_mean), m2i = as.numeric(control_mean), sd1i = as.numeric(treated_sd), sd2i = as.numeric(control_sd), n1i = as.numeric(treated_n), n2i = as.numeric(control_n), data = dados_two_sample)
dados_one_sample_smd = escalc(measure = "SMD", m1i = as.numeric(treated_mean), m2i = as.numeric(control_mean), sd1i = as.numeric(treated_sd), sd2i = rep(0, nrow(dados_one_sample)), n1i = as.numeric(treated_n), n2i = as.numeric(control_n), data = dados_one_sample)
dados_meta_smd = rbind(dados_two_sample_smd, dados_one_sample_smd)
meta1 = rma(yi=yi, vi=vi, data = dados_meta_smd, measure = "SMD", method = "REML", slab = rayyan.key)
summary(meta1)
confint(meta1)
orchaRd::orchard_plot(meta1, group = "Comparison_ID", xlab = "Effect size (Hedge's g)") +
scale_color_manual(values = "black") +
scale_fill_manual(values = "grey") +
scale_y_continuous(n.breaks = 20) +
theme(plot.margin = margin(0,10,0,0), text = element_text(size = 12)) +
geom_abline(intercept = 0, slope = 0, linetype = "longdash", color = "darkgreen", size = 0.70)
ggsave("./Figures/orchard-smd.png", width = 25, height = 10, units = "cm")
orchaRd::orchard_plot(meta1, group = "Comparison_ID", xlab = "Effect size (Hedge's g)") +
scale_color_manual(values = "black") +
scale_fill_manual(values = "grey") +
scale_y_continuous(n.breaks = 20) +
theme(plot.margin = margin(0,10,0,0), text = element_text(size = 12)) +
geom_abline(intercept = 0, slope = 0, linetype = "longdash", color = "darkgreen", size = 0.70)
ggsave("./Figures/orchard-smd.png", width = 20, height = 10, units = "cm")
orchaRd::orchard_plot(meta1, group = "Comparison_ID", xlab = "Effect size (Hedge's g)") +
scale_color_manual(values = "black") +
scale_fill_manual(values = "grey") +
scale_y_continuous(n.breaks = 20) +
theme(plot.margin = margin(0,10,0,0), text = element_text(size = 12)) +
geom_abline(intercept = 0, slope = 0, linetype = "longdash", color = "darkgreen", size = 0.70)
ggsave("./Figures/orchard-smd.png", width = 20, height = 15, units = "cm")
orchaRd::orchard_plot(meta1, group = "Comparison_ID", xlab = "Effect size (Hedge's g)") +
scale_color_manual(values = "black") +
scale_fill_manual(values = "grey") +
scale_y_continuous(n.breaks = 20) +
theme(plot.margin = margin(0,10,0,0), text = element_text(size = 12)) +
geom_abline(intercept = 0, slope = 0, linetype = "longdash", color = "darkgreen", size = 0.70)
ggsave("./Figures/orchard-smd.png", width = 20, height = 8, units = "cm")
orchaRd::orchard_plot(meta1, group = "Comparison_ID", xlab = "Effect size (Hedge's g)", k.pos = "left") +
scale_color_manual(values = "black") +
scale_fill_manual(values = "grey") +
scale_y_continuous(n.breaks = 20) +
theme(plot.margin = margin(0,10,0,0), text = element_text(size = 12)) +
geom_abline(intercept = 0, slope = 0, linetype = "longdash", color = "darkgreen", size = 0.70)
ggsave("./Figures/orchard-smd.png", width = 20, height = 8, units = "cm")
orchaRd::orchard_plot(meta1, group = "Comparison_ID", xlab = "Effect size (Hedge's g)", k.pos = "left") +
scale_color_manual(values = "black") +
scale_fill_manual(values = "grey") +
scale_y_continuous(n.breaks = 20) +
theme(plot.margin = margin(0,10,0,0), text = element_text(size = 12)) +
geom_abline(intercept = 0, slope = 0, linetype = "longdash", color = "darkgreen", size = 0.70)
ggsave("./Figures/orchard-smd.png", width = 15, height = 8, units = "cm")
orchaRd::orchard_plot(meta1, group = "Comparison_ID", xlab = "Effect size (Hedge's g)", k.pos = "left") +
scale_color_manual(values = "black") +
scale_fill_manual(values = "grey") +
scale_y_continuous(n.breaks = 20) +
theme(plot.margin = margin(0,10,0,0), text = element_text(size = 12)) +
geom_abline(intercept = 0, slope = 0, linetype = "longdash", color = "darkgreen", size = 0.70)
ggsave("./Figures/orchard-smd.png", width = 15, height = 8, units = "cm")
knitr::opts_chunk$set(echo = F)
library(tidyverse)
library(metafor)
library(metaviz)
library(glmulti)
library(knitr)
load("dados_analise.R")
dados_two_sample = dados_analise %>% filter(!is.na(control_sd)) %>% filter(control_sd!=0)
dados_one_sample = dados_analise %>% filter(is.na(control_sd)|control_sd==0)
dados_two_sample_rom = escalc(measure = "ROM", m1i = as.numeric(treated_mean), m2i = as.numeric(control_mean), sd1i = as.numeric(treated_sd), sd2i = as.numeric(control_sd), n1i = as.numeric(treated_n), n2i = as.numeric(control_n), data = dados_two_sample)
dados_one_sample_romc = escalc(measure = "ROMC", m1i = as.numeric(treated_mean), m2i = as.numeric(control_mean), sd1i = as.numeric(treated_sd), sd2i = rep(0, nrow(dados_one_sample)), ni = as.numeric(treated_n), ri = rep(0, nrow(dados_one_sample)), data = dados_one_sample)
dados_meta_ratios = rbind(dados_two_sample_rom, dados_one_sample_romc)
meta1 = rma(yi=yi, vi=vi, data = dados_meta_ratios, measure = "ROM", method = "REML", slab = rayyan.key)
summary(meta1)
confint(meta1)
#orchaRd::orchard_plot(meta1, group = "Comparison_ID", xlab = "Effect size (ratio of means)",
#    transfm = "none") +
#  scale_color_manual(values = "black") +
#  scale_fill_manual(values = "grey")
#ggsave("./Figures/orchard-ratios.png", width = 30, height = 20, units = "cm")
#orchaRd::orchard_plot(meta1, group = "Comparison_ID", xlab = "Effect size (percentr)",
#    transfm = "percentr") +
#  scale_color_manual(values = "black") +
#  scale_fill_manual(values = "grey") +
#  scale_y_continuous(n.breaks = 20)
#ggsave("./Figures/orchard-ratios-percent-scale.png", width = 30, height = 20, units = "cm")
#orchaRd::orchard_plot(meta1, group = "Comparison_ID", xlab = "Effect size (invlogit)",
#    transfm = "invlogit") +
#  scale_color_manual(values = "black") +
#  scale_fill_manual(values = "grey") +
#  scale_y_continuous(n.breaks = 20)
#ggsave("./Figures/orchard-ratios-inv-logit.png", width = 30, height = 20, units = "cm")
#orchaRd::orchard_plot(meta1, group = "Comparison_ID", xlab = "Effect size (tanh)",
#    transfm = "tanh") +
#  scale_color_manual(values = "black") +
#  scale_fill_manual(values = "grey") +
#  scale_y_continuous(n.breaks = 20)
orchaRd::orchard_plot(meta1, group = "Comparison_ID", xlab = "Cell viability in the Abeta group (% of control)",
transfm = "percent", k.pos = "left") +
scale_color_manual(values = "black") +
scale_fill_manual(values = "grey") +
scale_y_continuous(n.breaks = 20) +
theme(plot.margin = margin(0,10,0,0), text = element_text(size = 12)) +
geom_abline(intercept = 100, slope = 0, linetype = "longdash", color = "darkgreen", size = 0.70)
ggsave("./Figures/orchard-ratios-percent.png", width = 20, height = 10, units = "cm")
#orchaRd::orchard_plot(meta1, group = "Comparison_ID", xlab = "Effect size (percentr)",
#    transfm = "percentr") +
#  scale_color_manual(values = "black") +
#  scale_fill_manual(values = "grey") +
#  scale_y_continuous(n.breaks = 20)
#ggsave("./Figures/orchard-ratios-percent-scale.png", width = 30, height = 20, units = "cm")
#orchaRd::orchard_plot(meta1, group = "Comparison_ID", xlab = "Effect size (invlogit)",
#    transfm = "invlogit") +
#  scale_color_manual(values = "black") +
#  scale_fill_manual(values = "grey") +
#  scale_y_continuous(n.breaks = 20)
#ggsave("./Figures/orchard-ratios-inv-logit.png", width = 30, height = 20, units = "cm")
#orchaRd::orchard_plot(meta1, group = "Comparison_ID", xlab = "Effect size (tanh)",
#    transfm = "tanh") +
#  scale_color_manual(values = "black") +
#  scale_fill_manual(values = "grey") +
#  scale_y_continuous(n.breaks = 20)
orchaRd::orchard_plot(meta1, group = "Comparison_ID", xlab = "Cell viability in the Abeta group (% of control)",
transfm = "percent", k.pos = "left") +
scale_color_manual(values = "black") +
scale_fill_manual(values = "grey") +
scale_y_continuous(n.breaks = 20) +
theme(plot.margin = margin(0,10,0,0), text = element_text(size = 12)) +
geom_abline(intercept = 100, slope = 0, linetype = "longdash", color = "darkgreen", size = 0.70)
ggsave("./Figures/orchard-ratios-percent.png", width = 15, height = 8, units = "cm")
